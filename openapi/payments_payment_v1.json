{
  "openapi": "3.0.3",
  "info": {
    "title": "Payments",
    "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the Payments REST API to easily and securely accept online and mobile payments. The payments name space contains resource collections for payments, sales, refunds, authorizations, captures, and orders.<blockquote><strong>Important:</strong> The use of the PayPal REST <code>/payments</code> APIs to accept credit card payments is restricted. Instead, you can accept credit card payments with <a href=\"https://www.braintreepayments.com/products/braintree-direct\">Braintree Direct</a>.</blockquote>You can enable customers to make PayPal and credit card payments with only a few clicks, depending on the country. You can accept an immediate payment or authorize a payment and capture it later. You can show details for completed payments, refunds, and authorizations. You can make full or partial refunds. You also can void or re-authorize authorizations. For more information, see the <a href=\"/docs/integration/direct/payments/\">Payments overview</a>.",
    "version": "1.12",
    "contact": {}
  },
  "servers": [
    {
      "url": "https://api-m.sandbox.paypal.com",
      "description": "PayPal Sandbox Environment"
    },
    {
      "url": "https://api-m.paypal.com",
      "description": "PayPal Live Environment"
    }
  ],
  "tags": [
    {
      "name": "payment",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/payment</code> resource to create a <em>sale</em>, an <em>authorized payment</em>, or an <em>order</em>. A sale is a direct credit card payment, stored credit card payment, or PayPal payment. An authorized payment places funds on hold to be captured later. An order is a purchase that a customer has approved but for which the funds are not placed on hold. You can also use this resource to execute approved PayPal payments and show details for, update, and list payments. For more information, see also <a href=\"/docs/integration/direct/payments/\"Payments</a>."
    },
    {
      "name": "sale",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>A <em>sale</em> is a completed payment. Use the <code>/sale</code> resource to show sale details and refund a sale. For more information, see also <a href=\"/docs/integration/direct/payments/refund-payments/\">Refund payments</a>."
    },
    {
      "name": "authorization",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/authorization</code> resource and related sub-resources to show details for, capture, void, and reauthorize an authorization."
    },
    {
      "name": "orders",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/orders</code> resource to authorize, capture, void, and show details for an order.<blockquote><strong>Note:</strong> You cannot refund an order directly. Instead, you must refund a completed payment for an order. For integration information, see <a href=\"/docs/integration/direct/payments/orders/\">Orders</a> and <a href=\"/docs/integration/direct/payments/refund-payments/\">refund payment</a>.</blockquote>For more information, see also <a href=\"/docs/integration/direct/payments/orders/\">Orders</a>."
    },
    {
      "name": "capture",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/capture</code> resource and sub-resources to show details for and refund captured payments."
    },
    {
      "name": "refund",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/refund</code> resource to show details for a refund on direct and captured payments."
    },
    {
      "name": "receipt",
      "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Use the <code>/receipt</code> resource to show details for a payment receipt."
    }
  ],
  "externalDocs": {
    "url": "https://developer.paypal.com/docs/api/payments/v1/"
  },
  "paths": {
    "/v1/payments/payment": {
      "post": {
        "summary": "Create payment",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Creates a sale, an authorized payment to be captured later, or an order. To create a sale, authorization, or order, include the payment details in the JSON request body. Set the <code>intent</code> to <code>sale</code>, <code>authorize</code>, or <code>order</code>. <blockquote><strong>Note: </strong>TPP Clients (Third Party Providers in the context of PSD2 regulation) are restricted from using <code>authorize</code> and <code>order</code> intents.</blockquote> Include payer, transaction details, and, for PayPal payments only, redirect URLs. The combination of the <code>payment_method</code> and <code>funding_instrument</code> determines the type of payment that is created. For more information, see <a href=\"/docs/integration/direct/payments/\">Payments REST API</a>.",
        "operationId": "payment.create",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_partner_attribution_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment"
              },
              "examples": {
                "payment": {
                  "value": {
                    "intent": "sale",
                    "payer": {
                      "payment_method": "paypal"
                    },
                    "transactions": [
                      {
                        "amount": {
                          "total": "30.11",
                          "currency": "USD",
                          "details": {
                            "subtotal": "30.00",
                            "tax": "0.07",
                            "shipping": "0.03",
                            "handling_fee": "1.00",
                            "shipping_discount": "-1.00",
                            "insurance": "0.01"
                          }
                        },
                        "description": "The payment transaction description.",
                        "custom": "EBAY_EMS_90048630024435",
                        "invoice_number": "48787589673",
                        "payment_options": {
                          "allowed_payment_method": "INSTANT_FUNDING_SOURCE"
                        },
                        "soft_descriptor": "ECHI5786786",
                        "item_list": {
                          "items": [
                            {
                              "name": "hat",
                              "description": "Brown hat.",
                              "quantity": "5",
                              "price": "3",
                              "tax": "0.01",
                              "sku": "1",
                              "currency": "USD"
                            },
                            {
                              "name": "handbag",
                              "description": "Black handbag.",
                              "quantity": "1",
                              "price": "15",
                              "tax": "0.02",
                              "sku": "product34",
                              "currency": "USD"
                            }
                          ],
                          "shipping_address": {
                            "recipient_name": "Brian Robinson",
                            "line1": "4th Floor",
                            "line2": "Unit #34",
                            "city": "San Jose",
                            "country_code": "US",
                            "postal_code": "95131",
                            "phone": "011862212345678",
                            "state": "CA"
                          }
                        }
                      }
                    ],
                    "note_to_payer": "Contact us for any questions on your order.",
                    "redirect_urls": {
                      "return_url": "https://example.com/return",
                      "cancel_url": "https://example.com/cancel"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/paymentcard"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/channelpartner"
            ]
          }
        ],
        "tags": ["payment"]
      },
      "get": {
        "summary": "List payments",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Lists payments that are completed. Payments that you just created with the <a href=\"/docs/api/payments/v1/#payment_create\">create payment</a> call do not appear in the list.<br/><br/>The list shows the payments that are made to the merchant who makes the call. To filter the payments that appear in the response, you can specify one or more optional query and pagination parameters. See <a href=\"/docs/api/reference/api-requests/#query-parameters\">Filtering and pagination</a>.",
        "operationId": "payment.list",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that lists payments with payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_history"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/start_id"
          },
          {
            "$ref": "#/components/parameters/start_index"
          },
          {
            "$ref": "#/components/parameters/start_time"
          },
          {
            "$ref": "#/components/parameters/end_time"
          },
          {
            "$ref": "#/components/parameters/payee_id"
          },
          {
            "$ref": "#/components/parameters/sort_by"
          },
          {
            "$ref": "#/components/parameters/sort_order"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/checkout/onetimepayment"
            ]
          }
        ],
        "tags": ["payment"]
      }
    },
    "/v1/payments/payment/{payment_id}": {
      "get": {
        "summary": "Show payment details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a payment, by ID, that has yet to complete. For example, shows details for a payment that was created, approved, or failed.",
        "operationId": "payment.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["payment"]
      },
      "patch": {
        "summary": "Partially update payment",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Partially updates a payment, by ID. You can update the amount, shipping address, invoice ID, and custom data. You cannot update a payment after the payment executes. <blockquote><strong>Note: </strong>TPP Clients (Third Party Providers in the context of PSD2 regulation) are restricted from patching amount once authorized.</blockquote>",
        "operationId": "payment.update",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_request"
              },
              "examples": {
                "patch_request": {
                  "value": [
                    {
                      "op": "replace",
                      "path": "/transactions/0/amount",
                      "value": {
                        "total": "18.37",
                        "currency": "EUR",
                        "details": {
                          "subtotal": "13.37",
                          "shipping": "5.00"
                        }
                      }
                    },
                    {
                      "op": "add",
                      "path": "/transactions/0/item_list/shipping_address",
                      "value": {
                        "recipient_name": "Anna Gruneberg",
                        "line1": "Kathwarinenhof 1",
                        "city": "Flensburg",
                        "postal_code": "24939",
                        "country_code": "DE"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/channelpartner"
            ]
          }
        ],
        "tags": ["payment"]
      }
    },
    "/v1/payments/payment/{payment_id}/execute": {
      "post": {
        "summary": "Execute approved PayPal payment",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Executes a PayPal payment that the customer has approved. You can optionally update one or more transactions when you execute the payment.<blockquote><strong>Important:</strong> This call works only after a customer has approved the payment. For more information, learn about <a href=\"/docs/integration/direct/payments/paypal-payments/\">PayPal payments</a>.</blockquote>",
        "operationId": "payment.execute",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the executed payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/paypal_partner_attribution_id"
          },
          {
            "$ref": "#/components/parameters/payment_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment_execution"
              },
              "examples": {
                "payment_execution": {
                  "value": {
                    "payer_id": "CR87QHB7JTRSC"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          }
        ],
        "tags": ["payment"]
      }
    },
    "/v1/payments/sale/{sale_id}": {
      "get": {
        "summary": "Show sale details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a sale, by ID. Returns only sales that were created through the REST API.",
        "operationId": "sale.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows sale details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sale"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/sale_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["sale"]
      }
    },
    "/v1/payments/sale/{sale_id}/refund": {
      "post": {
        "summary": "Refund sale",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Refunds a sale, by ID. For a full refund, do not include the <code>amount</code> object in the JSON request body. For a partial refund, include an <code>amount</code> object in the JSON request body.",
        "operationId": "sale.refund",
        "responses": {
          "200": {
            "description": "A successful idempotent request returns the HTTP `200 Created` status code and a JSON response body that shows details for the refunded sale.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detailed_refund"
                }
              }
            }
          },
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the refunded sale.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detailed_refund"
                }
              }
            }
          },
          "409": {
            "description": "The request failed because a previous call for the given resource is in progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/sale_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refund_request"
              },
              "examples": {
                "refund_request": {
                  "value": {
                    "amount": {
                      "total": "100.00",
                      "currency": "USD"
                    },
                    "invoice_number": "INV-7654321"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/refund"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/unilateralrefund"
            ]
          }
        ],
        "tags": ["sale"]
      }
    },
    "/v1/payments/authorization/{authorization_id}": {
      "get": {
        "summary": "Show authorization details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for an authorization, by ID.",
        "operationId": "authorization.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows authorization details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["authorization"]
      }
    },
    "/v1/payments/authorization/{authorization_id}/capture": {
      "post": {
        "summary": "Capture authorization",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Captures and processes an authorization, by ID. The original payment call must specify an intent of <code>authorize</code>.",
        "operationId": "authorization.capture",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the captured authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capture"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/capture"
              },
              "examples": {
                "capture": {
                  "value": {
                    "amount": {
                      "currency": "USD",
                      "total": "4.54"
                    },
                    "is_final_capture": true
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["authorization"]
      }
    },
    "/v1/payments/authorization/{authorization_id}/void": {
      "post": {
        "summary": "Void authorization",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Voids, or cancels, an authorization, by ID. You cannot void a fully captured authorization.",
        "operationId": "authorization.void",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "409": {
            "description": "The request failed because a previous call for the given resource is in progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["authorization"]
      }
    },
    "/v1/payments/authorization/{authorization_id}/reauthorize": {
      "post": {
        "summary": "Re-authorize payment",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Re-authorizes a PayPal account payment, by authorization ID. To ensure that funds are still available, re-authorize a payment after the initial three-day honor period. Supports only the <code>amount</code> request parameter. You can re-authorize a payment only once from four to 29 days after three-day honor period for the original authorization expires. If 30 days have passed from the original authorization, you must create a new authorization instead. A re-authorized payment itself has a new three-day honor period. You can re-authorize a transaction once for up to 115% of the originally authorized amount, not to exceed an increase of $75 USD.",
        "operationId": "authorization.reauthorize",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the re-authorized authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization"
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["authorization"]
      }
    },
    "/v1/payments/orders/{order_id}": {
      "get": {
        "summary": "Show order details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for an order, by ID.",
        "operationId": "orders.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided authorization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["orders"]
      }
    },
    "/v1/payments/orders/{order_id}/capture": {
      "post": {
        "summary": "Capture order",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Captures a payment for an order, by ID. To use this call, the original payment call must specify an <code>order</code> intent. In the JSON request body, include the payment amount and indicate whether this capture is the final capture for the authorization.",
        "operationId": "orders.capture",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the captured order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capture"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/capture"
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["orders"]
      }
    },
    "/v1/payments/orders/{order_id}/do-void": {
      "post": {
        "summary": "Void order",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Voids, or cancels, an order, by ID. You can only void orders that are either in the <code>PENDING</code> or <code>AUTHORIZED</code> states or those in the <code>CAPTURED</code> state that are not fully captured.",
        "operationId": "orders.void",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["orders"]
      }
    },
    "/v1/payments/orders/{order_id}/authorize": {
      "post": {
        "summary": "Authorize order",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Authorizes an order, by ID. In the JSON request body, include an <code>amount</code> object.",
        "operationId": "orders.authorize",
        "responses": {
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the authorized order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/order_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["orders"]
      }
    },
    "/v1/payments/capture/{capture_id}": {
      "get": {
        "summary": "Show captured payment details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a captured payment, by ID.",
        "operationId": "capture.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the captured payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capture"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/capture_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/realtimepayment"
            ]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment/authcapture"
            ]
          }
        ],
        "tags": ["capture"]
      }
    },
    "/v1/payments/capture/{capture_id}/refund": {
      "post": {
        "summary": "Refund captured payment",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Refunds a captured payment, by ID. In the JSON request body, include an <code>amount</code> object.",
        "operationId": "capture.refund",
        "responses": {
          "200": {
            "description": "A successful idempotent request returns the HTTP `200 OK` status code and a JSON response body that shows details for the captured payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detailed_refund"
                }
              }
            }
          },
          "201": {
            "description": "A successful request returns the HTTP `201 OK` status code and a JSON response body that shows details for the captured payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detailed_refund"
                }
              }
            }
          },
          "409": {
            "description": "The request failed because a previous call for the given resource is in progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/capture_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/refund_request"
        },
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/refund"]
          },
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/unilateralrefund"
            ]
          }
        ],
        "tags": ["capture"]
      }
    },
    "/v1/payments/refund/{refund_id}": {
      "get": {
        "summary": "Show refund details",
        "description": "<blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href=\"/docs/checkout/integrate/\">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a refund, by ID.",
        "operationId": "refund.get",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows refund details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            }
          },
          "default": {
            "description": "The error details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/refund_id"
          }
        ],
        "security": [
          {
            "Oauth2": ["https://api.paypal.com/v1/payments/.*"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/payment"]
          },
          {
            "Oauth2": ["https://uri.paypal.com/services/payments/refund"]
          }
        ],
        "tags": ["refund"]
      }
    }
  },
  "components": {
    "requestBodies": {
      "capture": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/capture"
            }
          }
        }
      },
      "refund_request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refund_request"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Oauth2": {
        "type": "oauth2",
        "description": "Oauth 2.0 authentication",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/v1/oauth2/token",
            "scopes": {
              "https://api.paypal.com/v1/payments/.*": "Deprecated. Legacy payment scope. It will be replaced with new scopes",
              "https://uri.paypal.com/services/payments/payment": "New special privileged scope available to do payment. This will be available to internal clients only",
              "https://uri.paypal.com/services/payments/realtimepayment": "Permission to do any real time payment, with support for sale/authorize/order intents",
              "https://uri.paypal.com/services/payments/payment/authcapture": "Permission to do non-real time payments like authorization on order or capture on authorization or an order ",
              "https://uri.paypal.com/services/payments/refund": "Permission to initiate a refund/reversal on a sale or capture transaction",
              "https://uri.paypal.com/services/payments/paymentcard": "Permission to do unbranded credit or debit card payments",
              "https://uri.paypal.com/services/payments/futurepayments": "Permission for future or pre-approved payment.",
              "https://uri.paypal.com/services/payments/channelpartner": "Permission to explicitly specify the receiver of a payment on request payload.",
              "https://uri.paypal.com/services/payments/unilateralrefund": "This scope enables partners/facilitators to perform unilateralrefund and also refund.",
              "https://uri.paypal.com/services/checkout/onetimepayment": "This scope enable buyer's checkout flow to load payment information."
            }
          }
        }
      }
    },
    "schemas": {
      "2": {
        "type": "object",
        "title": "PayPal Wallet Customer Information",
        "description": "The details about a customer in PayPal's system of record."
      },
      "address": {
        "type": "object",
        "title": "Address",
        "description": "The billing address or shipping address for a payment.",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The first line of the address. For example, number, street, and so on.",
            "maxLength": 300
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address. For example, suite or apartment number.",
            "maxLength": 300
          },
          "city": {
            "type": "string",
            "description": "The city name.",
            "maxLength": 64
          },
          "country_code": {
            "description": "The address country code.",
            "$ref": "#/components/schemas/country_code"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code)."
          },
          "state": {
            "type": "string",
            "description": "The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [China](/docs/integration/direct/rest/state-codes/#china), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa).",
            "maxLength": 300
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "description": "The phone number, in [E.123 format](https://www.itu.int/rec/T-REC-E.123-200102-I/en). Maximum length is 50 characters."
          },
          "normalization_status": {
            "type": "string",
            "description": "The address normalization status. Returned only for payers from Brazil.",
            "readOnly": true,
            "x-enumDescriptions": [
              {
                "value": "UNKNOWN",
                "description": "Unknown."
              },
              {
                "value": "UNNORMALIZED_USER_PREFERRED",
                "description": "Unnormalized user preferred."
              },
              {
                "value": "NORMALIZED",
                "description": "Normalized."
              },
              {
                "value": "UNNORMALIZED",
                "description": "Unnormalized."
              }
            ],
            "enum": [
              "UNKNOWN",
              "UNNORMALIZED_USER_PREFERRED",
              "NORMALIZED",
              "UNNORMALIZED"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of address. For example, `HOME_OR_WORK`, `GIFT`, and so on."
          }
        },
        "required": ["line1", "country_code"]
      },
      "amount": {
        "type": "object",
        "title": "Amount",
        "description": "The payment amount, with details.",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies."
          },
          "total": {
            "type": "string",
            "description": "The total amount charged to the payee by the payer. For refunds, represents the amount that the payee refunds to the original payer. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li><li>For currencies like `JPY` do not support decimals.</li></ul>"
          },
          "details": {
            "$ref": "#/components/schemas/details"
          }
        },
        "required": ["currency", "total"]
      },
      "apple_pay_attributes": {
        "type": "object",
        "title": "Apple Pay Attributes",
        "description": "Additional attributes associated with apple pay.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/customer"
          },
          "vault": {
            "$ref": "#/components/schemas/v3_vault_instruction_base"
          }
        }
      },
      "apple_pay_decrypted_token_data": {
        "type": "object",
        "title": "ApplePay Decrypted Token Data",
        "description": "Information about the Payment data obtained by decrypting Apple Pay token.",
        "properties": {
          "transaction_amount": {
            "description": "The transaction amount for the payment that the payer has approved on apple platform.",
            "$ref": "#/components/schemas/money"
          },
          "tokenized_card": {
            "$ref": "#/components/schemas/tokenized_card"
          },
          "device_manufacturer_id": {
            "description": "Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "payment_data_type": {
            "description": "Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.",
            "type": "string",
            "minLength": 1,
            "maxLength": 16,
            "pattern": "^[0-9A-Z_]+$",
            "x-enumDescriptions": [
              {
                "value": "3DSECURE",
                "description": "The card was authenticated using 3D Secure (3DS) authentication scheme. While using this value make sure to populate cryptogram and eci_indicator as part of payment data.."
              },
              {
                "value": "EMV",
                "description": "The card was authenticated using EMV method, which is applicable for China. While using this value make sure to pass emv_data and pin as part of payment data."
              }
            ],
            "enum": ["3DSECURE", "EMV"]
          },
          "payment_data": {
            "description": "Apple Pay payment data object which contains the cryptogram, eci_indicator and other data.",
            "$ref": "#/components/schemas/apple_pay_payment_data"
          }
        },
        "required": ["tokenized_card"]
      },
      "apple_pay_payment_data": {
        "type": "object",
        "title": "ApplePay Payment Data",
        "description": "Information about the decrypted apple pay payment data for the token like cryptogram, eci indicator.",
        "properties": {
          "cryptogram": {
            "description": "Online payment cryptogram, as defined by 3D Secure. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "eci_indicator": {
            "description": "ECI indicator, as defined by 3- Secure. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^.*$"
          },
          "emv_data": {
            "description": "Encoded Apple Pay EMV Payment Structure used for payments in China. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "pin": {
            "description": "Bank Key encrypted Apple Pay PIN. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          }
        }
      },
      "apple_pay_request": {
        "type": "object",
        "title": "ApplePay payment request object",
        "description": "Information needed to pay using ApplePay.",
        "properties": {
          "id": {
            "description": "ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^.*$"
          },
          "name": {
            "description": "Name on the account holder associated with apple pay.",
            "$ref": "#/components/schemas/full_name"
          },
          "email_address": {
            "description": "The email address of the account holder associated with apple pay.",
            "$ref": "#/components/schemas/email_address"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          },
          "decrypted_token": {
            "description": "The decrypted payload details for the apple pay token.",
            "$ref": "#/components/schemas/apple_pay_decrypted_token_data"
          },
          "stored_credential": {
            "$ref": "#/components/schemas/card_stored_credential"
          },
          "vault_id": {
            "description": "The PayPal-generated ID for the saved apple pay payment_source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
            "$ref": "#/components/schemas/vault_id"
          },
          "attributes": {
            "$ref": "#/components/schemas/apple_pay_attributes"
          }
        }
      },
      "application_context": {
        "type": "object",
        "title": "Application Context",
        "description": "The application context. Set these properties to customize the payment flow experience for your customers.",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "A label that overrides the business name in the merchant's PayPal account on the PayPal checkout pages.",
            "maxLength": 127
          },
          "locale": {
            "type": "string",
            "description": "The locale of pages that the PayPal payment experience displays. Please refer [here](/docs/api/reference/locale-codes/#localize-the-checkout-experience) for list of supported local codes.  Defaulted to en_US if not provided or invalid."
          },
          "landing_page": {
            "type": "string",
            "description": "The type of landing page to show on the PayPal site for customer checkout. To use the non-PayPal account landing page, set to `Billing`. To use the PayPal account log in landing page, set to `Login`."
          },
          "shipping_preference": {
            "type": "string",
            "description": "The shipping preference.",
            "x-enumDescriptions": [
              {
                "value": "NO_SHIPPING",
                "description": "Redacts the shipping address from the PayPal pages. Recommended for digital goods."
              },
              {
                "value": "GET_FROM_FILE",
                "description": "Uses the customer-selected shipping address on PayPal pages."
              },
              {
                "value": "SET_PROVIDED_ADDRESS",
                "description": "If available, uses the merchant-provided shipping address, which the customer cannot change on the PayPal pages. If the merchant does not provide an address, the customer can enter the address on PayPal pages."
              }
            ],
            "default": "GET_FROM_FILE",
            "enum": ["NO_SHIPPING", "GET_FROM_FILE", "SET_PROVIDED_ADDRESS"]
          },
          "user_action": {
            "type": "string",
            "description": "The user action. Presents the customer with either the <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow:<table><thead><tr valign=\"top\" align=\"left\"><th>Flow</th><th>Action</th><th>Description</th></tr></thead><tbody><tr valign=\"top\" align=\"left\"><td><strong>Pay Now</strong></td><td><code>user_action=commit</code></td><td>After the customer is redirected to the PayPal payment page, shows the <strong>Pay Now</strong> button.<br/><br/>Use this option when you know the final amount when checkout is initiated and you want to process the payment immediately when the customer clicks <strong>Pay Now</strong>.</td></tr><tr valign=\"top\" align=\"left\"><td><strong>Continue</strong></td><td> <code>user_action=continue</code></td><td>After the customer is redirected to the PayPal payment page, shows the <strong>Continue</strong> button.<br/><br/>Use this option when you do not know the final amount when you initiate the checkout flow and you want to redirect the customer to the merchant page without processing the payment.</td></tr></tbody></table>"
          },
          "preferred_payment_source": {
            "$ref": "#/components/schemas/preferred_payment_source"
          },
          "payment_pattern": {
            "$ref": "#/components/schemas/payment_pattern"
          }
        }
      },
      "assurance_details": {},
      "attributes": {
        "description": "Additional attributes associated with the use of this card.",
        "type": "object",
        "title": "Card Attributes",
        "properties": {
          "verification": {
            "description": "Instruction to optionally verify the card based on the specified strategy.",
            "$ref": "#/components/schemas/card_verification"
          }
        }
      },
      "authorization": {
        "type": "object",
        "title": "Authorization",
        "description": "The authorization details.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the authorization."
          },
          "amount": {
            "$ref": "#/components/schemas/amount",
            "description": "The amount being authorized."
          },
          "payment_mode": {
            "type": "string",
            "description": "The payment mode of the authorization.",
            "readOnly": true,
            "x-enumDescriptions": [
              {
                "value": "INSTANT_TRANSFER",
                "description": "Instant transfer."
              }
            ],
            "enum": ["INSTANT_TRANSFER"]
          },
          "state": {
            "type": "string",
            "description": "The authorized payment state.",
            "x-enumDescriptions": [
              {
                "value": "pending",
                "description": "The authorized payment is pending."
              },
              {
                "value": "authorized",
                "description": "The authorized payment is authorized."
              },
              {
                "value": "partially_captured",
                "description": "The authorized payment is partially captured."
              },
              {
                "value": "captured",
                "description": "The authorized payment is captured."
              },
              {
                "value": "expired",
                "description": "The authorized payment is expired."
              },
              {
                "value": "denied",
                "description": "PayPal can no longer authorize funds against this authorization."
              },
              {
                "value": "voided",
                "description": "The authorized payment is voided."
              }
            ],
            "readOnly": true,
            "enum": [
              "pending",
              "authorized",
              "partially_captured",
              "captured",
              "expired",
              "denied",
              "voided"
            ]
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code for the pending transaction state.",
            "x-enumDescriptions": [
              {
                "value": "AUTHORIZATION",
                "description": "Authorization."
              }
            ],
            "readOnly": true,
            "enum": ["AUTHORIZATION"]
          },
          "pending_reason": {
            "type": "string",
            "description": "Deprecated. The reason code for the pending transaction state. Obsolete. Use `reason_code` instead.",
            "x-enumDescriptions": [
              {
                "value": "AUTHORIZATION",
                "description": "Authorization."
              }
            ],
            "readOnly": true,
            "enum": ["AUTHORIZATION"]
          },
          "protection_eligibility": {
            "type": "string",
            "description": "The level of seller protection present for the transaction. Supported for the PayPal payment method only.",
            "x-enumDescriptions": [
              {
                "value": "ELIGIBLE",
                "description": " Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received."
              },
              {
                "value": "PARTIALLY_ELIGIBLE",
                "description": "Merchant is protected by PayPal's Seller Protection Policy for Item Not Received or Unauthorized Payments. For details, see `protection_eligibility_type`."
              },
              {
                "value": "INELIGIBLE",
                "description": "Merchant is not protected under the Seller Protection Policy."
              }
            ],
            "readOnly": true,
            "enum": ["ELIGIBLE", "PARTIALLY_ELIGIBLE", "INELIGIBLE"]
          },
          "protection_eligibility_type": {
            "type": "string",
            "description": "The type of seller protection for the transaction. Returned only when the `protection_eligibility` property is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported for the PayPal payment method only.",
            "x-enumDescriptions": [
              {
                "value": "ITEM_NOT_RECEIVED_ELIGIBLE",
                "description": "Sellers are protected against claims for items not received."
              },
              {
                "value": "UNAUTHORIZED_PAYMENT_ELIGIBLE",
                "description": "Sellers are protected against claims for unauthorized payments."
              },
              {
                "value": "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE",
                "description": "Sellers are protected against claims for items not received and sellers are protected against claims for unauthorized payments."
              }
            ],
            "readOnly": true,
            "enum": [
              "ITEM_NOT_RECEIVED_ELIGIBLE",
              "UNAUTHORIZED_PAYMENT_ELIGIBLE",
              "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE"
            ]
          },
          "fmf_details": {
            "$ref": "#/components/schemas/fmf_details"
          },
          "parent_payment": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the payment on which this transaction is based."
          },
          "processor_response": {
            "$ref": "#/components/schemas/processor_response"
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the authorization expires, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the authorization was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the authorization was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "receipt_id": {
            "type": "string",
            "description": "The receipt ID, which identifies the payment. Value is 16-digit numeric payment ID number that is returned for guest users.",
            "pattern": "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        },
        "required": ["amount"]
      },
      "bancontact_request": {
        "type": "object",
        "title": "Bancontact payment request",
        "description": "Information needed to pay using Bancontact.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "bic": {
        "type": "string",
        "title": "BIC",
        "description": "The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.",
        "minLength": 8,
        "maxLength": 11,
        "pattern": "^[A-Z-a-z0-9]{4}[A-Z-a-z]{2}[A-Z-a-z0-9]{2}([A-Z-a-z0-9]{3})?$"
      },
      "billing_agreement_id": {
        "type": "string",
        "description": "The PayPal billing agreement ID. References an approved recurring payment for goods or services.",
        "minLength": 2,
        "maxLength": 128,
        "pattern": "^[a-zA-Z0-9-]+$"
      },
      "blik_experience_context": {
        "type": "object",
        "title": "BLIK Experience Context",
        "description": "Customizes the payer experience during the approval process for the BLIK payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/experience_context_base"
          },
          {
            "properties": {
              "consumer_ip": {
                "description": "The IP address of the consumer. It could be either IPv4 or IPv6.",
                "$ref": "#/components/schemas/ip_address"
              },
              "consumer_user_agent": {
                "type": "string",
                "description": "The payer's User Agent. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0).",
                "minLength": 1,
                "maxLength": 256,
                "pattern": "^.*$"
              }
            }
          }
        ]
      },
      "blik_one_click": {
        "type": "object",
        "title": "BLIK one-click payment request",
        "description": "Information used to pay using BLIK one-click flow.",
        "properties": {
          "auth_code": {
            "type": "string",
            "description": "The 6-digit code used to authenticate a consumer within BLIK.",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "^[0-9]{6}$"
          },
          "consumer_reference": {
            "type": "string",
            "description": "The merchant generated, unique reference serving as a primary identifier for accounts connected between Blik and a merchant.",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[ -~]{3,64}$"
          },
          "alias_label": {
            "type": "string",
            "description": "A bank defined identifier used as a display name to allow the payer to differentiate between multiple registered bank accounts.",
            "minLength": 8,
            "maxLength": 35,
            "pattern": "^[ -~]{8,35}$"
          },
          "alias_key": {
            "type": "string",
            "description": "A Blik-defined identifier for a specific Blik-enabled bank account that is associated with a given merchant. Used only in conjunction with a Consumer Reference.",
            "minLength": 1,
            "maxLength": 19,
            "pattern": "^[0-9]+$"
          }
        },
        "required": ["consumer_reference"]
      },
      "blik_request": {
        "type": "object",
        "title": "BLIK payment request",
        "description": "Information needed to pay using BLIK.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "email": {
            "description": "The email address of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/email_address"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/blik_experience_context"
          },
          "level_0": {
            "description": "The level_0 integration flow object.",
            "$ref": "#/components/schemas/blik_seamless"
          },
          "one_click": {
            "description": "The one-click integration flow object.",
            "$ref": "#/components/schemas/blik_one_click"
          }
        },
        "required": ["name", "country_code"]
      },
      "blik_seamless": {
        "type": "object",
        "title": "BLIK level_0 payment object",
        "description": "Information used to pay using BLIK level_0 flow.",
        "properties": {
          "auth_code": {
            "type": "string",
            "description": "The 6-digit code used to authenticate a consumer within BLIK.",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "^[0-9]{6}$"
          }
        },
        "required": ["auth_code"]
      },
      "capture": {
        "type": "object",
        "title": "Capture",
        "description": "The capture transaction details.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the capture transaction.",
            "readOnly": true
          },
          "amount": {
            "description": "The amount to capture. If the amount matches the originally authorized amount, the state of the authorization changes to `captured`. Otherwise, the state changes to `partially_captured`.",
            "$ref": "#/components/schemas/amount"
          },
          "is_final_capture": {
            "type": "boolean",
            "description": "Indicates whether to release all remaining held funds.",
            "default": false
          },
          "state": {
            "type": "string",
            "description": "The state of the capture.",
            "x-enumDescriptions": [
              {
                "value": "pending",
                "description": "The capture is pending."
              },
              {
                "value": "completed",
                "description": "The capture has successfully completed."
              },
              {
                "value": "refunded",
                "description": "The capture was fully refunded."
              },
              {
                "value": "partially_refunded",
                "description": "The capture was partially refunded."
              },
              {
                "value": "denied",
                "description": "PayPal has declined to process this transaction."
              }
            ],
            "readOnly": true,
            "enum": [
              "pending",
              "completed",
              "refunded",
              "partially_refunded",
              "denied"
            ]
          },
          "reason_code": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "CHARGEBACK",
                "description": "The transaction state is `pending` or `reversed` due to a chargeback."
              },
              {
                "value": "GUARANTEE",
                "description": "The transaction state is `pending` or `reversed` due to a guarantee."
              },
              {
                "value": "BUYER_COMPLAINT",
                "description": "The transaction state is `pending` or `reversed` due to a customer complaint."
              },
              {
                "value": "REFUND",
                "description": "The transaction state is `pending` or `reversed` due to a REFUND."
              },
              {
                "value": "UNCONFIRMED_SHIPPING_ADDRESS",
                "description": "The transaction state is `pending` or `reversed` due to an unconfirmed shipping address."
              },
              {
                "value": "ECHECK",
                "description": "The transaction state is `pending` or `reversed` due to an e-check."
              },
              {
                "value": "INTERNATIONAL_WITHDRAWAL",
                "description": "The transaction state is `pending` or `reversed` due to an international withdrawal."
              },
              {
                "value": "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
                "description": "The transaction state is `pending` or `reversed` due to a receiving preference that mandates manual action."
              },
              {
                "value": "PAYMENT_REVIEW",
                "description": "The transaction state is `pending` or `reversed` due to a payment review."
              },
              {
                "value": "REGULATORY_REVIEW",
                "description": "The transaction state is `pending` or `reversed` due to a regulatory review."
              },
              {
                "value": "UNILATERAL",
                "description": "The transaction state is `pending` or `reversed` due to a unilateral action."
              },
              {
                "value": "VERIFICATION_REQUIRED",
                "description": "The transaction state is `pending` or `reversed` because verification is required."
              },
              {
                "value": "TRANSACTION_APPROVED_AWAITING_FUNDING",
                "description": "The transaction state is `pending` or `reversed` because an approved transaction is awaiting funding."
              },
              {
                "value": "NONE",
                "description": "Returned only when the state is 'completed'. Returned only as part of the 'POST' response."
              }
            ],
            "description": "The reason code that describes why the transaction state is pending or reversed.",
            "readOnly": true,
            "enum": [
              "CHARGEBACK",
              "GUARANTEE",
              "BUYER_COMPLAINT",
              "REFUND",
              "UNCONFIRMED_SHIPPING_ADDRESS",
              "ECHECK",
              "INTERNATIONAL_WITHDRAWAL",
              "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
              "PAYMENT_REVIEW",
              "REGULATORY_REVIEW",
              "UNILATERAL",
              "VERIFICATION_REQUIRED",
              "TRANSACTION_APPROVED_AWAITING_FUNDING",
              "NONE"
            ]
          },
          "parent_payment": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the payment on which this transaction is based."
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number to track this payment.",
            "maxLength": 127
          },
          "transaction_fee": {
            "description": "The currency and amount of the transaction fee for this payment. Would not be returned for `pending` transactions where the funds have not been realized in the payee account.",
            "readOnly": true,
            "$ref": "#/components/schemas/currency"
          },
          "transaction_fee_in_receivable_currency": {
            "description": "The currency and amount of the PayPal fee for this payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example `CNY`. Would not be returned for `pending` transactions where the funds have not been realized in the payee account.",
            "readOnly": true,
            "$ref": "#/components/schemas/currency"
          },
          "receivable_amount": {
            "description": "The net amount and currency that the merchant receives for this transaction in the receivable currency.",
            "$ref": "#/components/schemas/currency",
            "readOnly": true
          },
          "exchange_rate": {
            "type": "string",
            "description": "The exchange rate applied for this transaction. Returned when there is a currency conversion from the transaction currency to the receivable currency.",
            "readOnly": true
          },
          "note_to_payer": {
            "type": "string",
            "description": "A free-form field that clients can use to send a note to the payer.",
            "maxLength": 255
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the capture, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        }
      },
      "card_brand": {
        "type": "string",
        "title": "Card Brand",
        "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[A-Z_]+$",
        "x-enumDescriptions": [
          {
            "value": "VISA",
            "description": "Visa card."
          },
          {
            "value": "MASTERCARD",
            "description": "Mastecard card."
          },
          {
            "value": "DISCOVER",
            "description": "Discover card."
          },
          {
            "value": "AMEX",
            "description": "American Express card."
          },
          {
            "value": "SOLO",
            "description": "Solo debit card."
          },
          {
            "value": "JCB",
            "description": "Japan Credit Bureau card."
          },
          {
            "value": "STAR",
            "description": "Military Star card."
          },
          {
            "value": "DELTA",
            "description": "Delta Airlines card."
          },
          {
            "value": "SWITCH",
            "description": "Switch credit card."
          },
          {
            "value": "MAESTRO",
            "description": "Maestro credit card."
          },
          {
            "value": "CB_NATIONALE",
            "description": "Carte Bancaire (CB) credit card."
          },
          {
            "value": "CONFIGOGA",
            "description": "Configoga credit card."
          },
          {
            "value": "CONFIDIS",
            "description": "Confidis credit card."
          },
          {
            "value": "ELECTRON",
            "description": "Visa Electron credit card."
          },
          {
            "value": "CETELEM",
            "description": "Cetelem credit card."
          },
          {
            "value": "CHINA_UNION_PAY",
            "description": "China union pay credit card."
          },
          {
            "value": "DINERS",
            "description": "The Diners Club International banking and payment services capability network owned by Discover Financial Services (DFS), one of the most recognized brands in US financial services."
          },
          {
            "value": "ELO",
            "description": "The Brazilian Elo card payment network."
          },
          {
            "value": "HIPER",
            "description": "The Hiper - Ingenico ePayment network."
          },
          {
            "value": "HIPERCARD",
            "description": "The Brazilian Hipercard payment network that's widely accepted in the retail market."
          },
          {
            "value": "RUPAY",
            "description": "The RuPay payment network."
          },
          {
            "value": "GE",
            "description": "The GE Credit Union 3Point card payment network."
          },
          {
            "value": "SYNCHRONY",
            "description": "The Synchrony Financial (SYF) payment network."
          },
          {
            "value": "EFTPOS",
            "description": "The Electronic Fund Transfer At Point of Sale(EFTPOS) Debit card payment network."
          },
          {
            "value": "UNKNOWN",
            "description": "UNKNOWN payment network."
          }
        ],
        "enum": [
          "VISA",
          "MASTERCARD",
          "DISCOVER",
          "AMEX",
          "SOLO",
          "JCB",
          "STAR",
          "DELTA",
          "SWITCH",
          "MAESTRO",
          "CB_NATIONALE",
          "CONFIGOGA",
          "CONFIDIS",
          "ELECTRON",
          "CETELEM",
          "CHINA_UNION_PAY",
          "DINERS",
          "ELO",
          "HIPER",
          "HIPERCARD",
          "RUPAY",
          "GE",
          "SYNCHRONY",
          "EFTPOS",
          "UNKNOWN"
        ]
      },
      "card_stored_credential": {
        "type": "object",
        "title": "Card Stored Credential",
        "description": "Provides additional details to process a payment using a `card` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`.</li><li>Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.</li></ul>",
        "properties": {
          "payment_initiator": {
            "$ref": "#/components/schemas/payment_initiator"
          },
          "payment_type": {
            "$ref": "#/components/schemas/stored_payment_source_payment_type"
          },
          "usage": {
            "$ref": "#/components/schemas/stored_payment_source_usage_type"
          },
          "previous_network_transaction_reference": {
            "$ref": "#/components/schemas/network_transaction_reference"
          }
        },
        "required": ["payment_initiator", "payment_type"]
      },
      "card_type": {
        "type": "string",
        "title": "Card Type",
        "description": "Type of card. i.e Credit, Debit and so on.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[A-Z_]+$",
        "x-enumDescriptions": [
          {
            "value": "CREDIT",
            "description": "A credit card."
          },
          {
            "value": "DEBIT",
            "description": "A debit card."
          },
          {
            "value": "PREPAID",
            "description": "A Prepaid card."
          },
          {
            "value": "STORE",
            "description": "A store card."
          },
          {
            "value": "UNKNOWN",
            "description": "Card type cannot be determined."
          }
        ],
        "enum": ["CREDIT", "DEBIT", "PREPAID", "STORE", "UNKNOWN"]
      },
      "card_verification": {
        "type": "object",
        "title": "Card Verification",
        "description": "The API caller can opt in to verify the card through PayPal offered verification services (e.g. Smart Dollar Auth, 3DS).",
        "properties": {
          "method": {
            "description": "The method used for card verification.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[0-9A-Z_]+$",
            "default": "SCA_WHEN_REQUIRED",
            "x-enumDescriptions": [
              {
                "value": "SCA_ALWAYS",
                "description": "Selecting this option will attempt to force a strong customer authentication for the authorization/transaction. In countries where SCA has been defined and implemented it will result in a contingency and HATEOAS link being returned.  The API caller should redirect the payer to that link so that they can authenticate themselves against their issuing bank or other entity. As noted, the HATEOAS link is only available in all regions where strong authentication is supported, (e.g. in European countries where 3DS is live). Merchants can use this setting as an additional layer of security if they choose to. In all cases, when an authorization is requested the AVS/CVV results will be returned in the response."
              },
              {
                "value": "SCA_WHEN_REQUIRED",
                "description": "This is the default. When an authorization or transaction is attempted this option will return a contingency and HATEOAS link only when local regulations require strong customer authentication, (e.g. 3DS in countries and use cases where it is mandated). The API caller should redirect the payer to the link so that they can authenticate themselves. In all cases, when an authorization is requested the AVS/CVV results will be returned in the response."
              },
              {
                "value": "3D_SECURE",
                "description": "The contingency surfaced as an additional security layer that helps prevent unauthorized card-not-present transactions and protects the merchant from exposure to fraud.",
                "deprecated": true
              },
              {
                "value": "AVS_CVV",
                "description": "Places a temporary hold on the card to ensure its validity. This process protects the merchant from exposure to fraud. This verification method will confirm that the address information or CVV included matches what the issuing bank has on file for the associated card, ensuring that only authorized card users are able to make purchases from you.",
                "deprecated": true
              }
            ],
            "enum": ["SCA_ALWAYS", "SCA_WHEN_REQUIRED", "3D_SECURE", "AVS_CVV"]
          }
        }
      },
      "cart_base": {
        "type": "object",
        "title": "Cart Base",
        "description": "The cart.",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The merchant-provided ID for the purchase unit.",
            "maxLength": 256
          },
          "amount": {
            "$ref": "#/components/schemas/amount",
            "description": "The amount to collect."
          },
          "payee": {
            "$ref": "#/components/schemas/payee"
          },
          "description": {
            "type": "string",
            "description": "The purchase description.",
            "maxLength": 127
          },
          "note_to_payee": {
            "type": "string",
            "description": "The note to the recipient of the funds in this transaction.",
            "maxLength": 255
          },
          "custom": {
            "type": "string",
            "description": "The free-form field for the client's use.",
            "maxLength": 127
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number to track this payment.",
            "maxLength": 127
          },
          "soft_descriptor": {
            "type": "string",
            "description": "The payment descriptor on account transactions on the customer's credit card statement, that PayPal sends to processors. The maximum length of the soft descriptor information that you can pass in the API field is 22 characters, in the following format:<pre>22 - len(PAYPAL * (8)) - len(<var>Descriptor in Payment Receiving Preferences of Merchant account</var> + 1)</pre>The PAYPAL prefix uses 8 characters.<br/><br/>The soft descriptor supports the following ASCII characters:<ul><li>Alphanumeric characters</li><li>Dashes</li><li>Asterisks</li><li>Periods (.)</li><li>Spaces</li></ul>For Wallet payments marketplace integrations:<ul><li>The merchant descriptor in the Payment Receiving Preferences must be the marketplace name.</li><li>You can't use the remaining space to show the customer service number.</li><li>The remaining spaces can be a combination of seller name and country.</li></ul><br/>For unbranded payments (Direct Card) marketplace integrations, use a combination of the seller name and phone number.",
            "maxLength": 22
          },
          "payment_options": {
            "$ref": "#/components/schemas/definitions-payment_options"
          },
          "item_list": {
            "$ref": "#/components/schemas/item_list"
          },
          "notify_url": {
            "type": "string",
            "format": "uri",
            "description": "The send payment notifications URL.",
            "maxLength": 2048
          },
          "order_url": {
            "type": "string",
            "format": "uri",
            "description": "The payment-related URL on the merchant site.",
            "maxLength": 2048
          }
        },
        "required": ["amount"]
      },
      "cart_base_list": {
        "type": "array",
        "description": "An array of transaction details. Includes the amount and item details. For update and execute payment calls, the `transactions` object accepts only the `amount` object.",
        "items": {
          "$ref": "#/components/schemas/cart_base"
        }
      },
      "country_code": {
        "type": "string",
        "description": "The [two-character ISO 3166-1 code](/docs/api/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
        "format": "ppaas_common_country_code_v2",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2}|C2)$"
      },
      "country_code-2": {
        "type": "string",
        "description": "The [2-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
        "format": "ppaas_common_country_code_v2",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2}|C2)$"
      },
      "country_code-3": {
        "type": "string",
        "description": "The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
        "format": "ppaas_common_country_code_v2",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2}|C2)$"
      },
      "credit_card_token": {
        "type": "object",
        "title": "Credit Card Token",
        "description": "The tokenized credit card details. You can use this instrument to fund a payment.",
        "properties": {
          "credit_card_id": {
            "type": "string",
            "description": "The ID of credit card that is stored in the PayPal vault.",
            "minLength": 1,
            "maxLength": 256
          },
          "payer_id": {
            "type": "string",
            "description": "Deprecated. A unique ID that you can assign and track when you store a credit card in the vault or use a vaulted credit card. This ID can help to avoid unintentional use or misuse of credit cards and can be any value, such as a UUID, user name, or email address. **Required** when you use a vaulted credit card and if a `payer_id` was originally provided when you vaulted the credit card. Use external_customer_id instead.",
            "maxLength": 1,
            "minLength": 256
          },
          "external_customer_id": {
            "type": "string",
            "description": "The externally-provided ID of the customer.",
            "minLength": 1,
            "maxLength": 256
          },
          "last4": {
            "type": "string",
            "readOnly": true,
            "description": "The last four digits of the stored credit card number.",
            "minLength": 4,
            "maxLength": 4
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display.",
            "minLength": 1,
            "maxLength": 256
          },
          "expire_month": {
            "type": "integer",
            "readOnly": true,
            "description": "The expiration month with no leading zero. Value is from `1` to `12`.",
            "minimum": 1,
            "maximum": 12
          },
          "expire_year": {
            "type": "string",
            "readOnly": true,
            "description": "The four-digit expiration year.",
            "pattern": "^[0-9]{4}$",
            "minLength": 4,
            "maxLength": 4
          }
        },
        "required": ["credit_card_id"]
      },
      "currency": {
        "type": "object",
        "title": "Currency",
        "description": "The currency and amount for a transaction.",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies."
          },
          "value": {
            "type": "string",
            "description": "The amount. Includes the specified number of digits after decimal separator for the [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)."
          }
        },
        "required": ["currency", "value"]
      },
      "currency_code": {
        "description": "The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.",
        "type": "string",
        "format": "ppaas_common_currency_code_v2",
        "minLength": 3,
        "maxLength": 3
      },
      "currency_code-2": {
        "description": "The [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) that identifies the currency.",
        "type": "string",
        "format": "ppaas_common_currency_code_v2",
        "minLength": 3,
        "maxLength": 3
      },
      "customer": {
        "type": "object",
        "title": "Customer Information",
        "description": "The details about a customer in PayPal's system of record.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/merchant_partner_customer_id"
          },
          "email_address": {
            "description": "Email address of the buyer as provided to the merchant or on file with the merchant. Email Address is required if you are processing the transaction using PayPal Guest Processing which is offered to select partners and merchants. For all other use cases we do not expect partners/merchant to send email_address of their customer.",
            "$ref": "#/components/schemas/email"
          },
          "phone": {
            "description": "The phone number of the buyer as provided to the merchant or on file with the merchant. The `phone.phone_number` supports only `national_number`.",
            "$ref": "#/components/schemas/phone_with_type"
          }
        }
      },
      "date_no_time": {
        "type": "string",
        "description": "The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.",
        "format": "ppaas_date_notime_v2",
        "minLength": 10,
        "maxLength": 10,
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"
      },
      "date_year_month": {
        "type": "string",
        "description": "The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "minLength": 7,
        "maxLength": 7,
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])$"
      },
      "definitions-address": {
        "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
        "type": "object",
        "title": "Portable Postal Address (Medium-Grained)",
        "properties": {
          "address_line_1": {
            "type": "string",
            "description": "The first line of the address, such as number and street, for example, `173 Drury Lane`. Needed for data entry, and Compliance and Risk checks. This field needs to pass the full address.",
            "maxLength": 300
          },
          "address_line_2": {
            "type": "string",
            "description": "The second line of the address, for example, a suite or apartment number.",
            "maxLength": 300
          },
          "admin_area_2": {
            "type": "string",
            "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
            "maxLength": 120
          },
          "admin_area_1": {
            "type": "string",
            "description": "The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. This data is formatted for postal delivery, for example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A *kanton*.</li></ul>",
            "maxLength": 300
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
            "maxLength": 60
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code-2"
          }
        },
        "required": ["country_code"]
      },
      "definitions-customer": {
        "type": "object",
        "title": "Customer Information",
        "description": "The details about a customer in PayPal's system of record.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/merchant_partner_customer_id"
          },
          "email_address": {
            "description": "Email address of the buyer as provided to the merchant or on file with the merchant. Email Address is required if you are processing the transaction using PayPal Guest Processing which is offered to select partners and merchants. For all other use cases we do not expect partners/merchant to send email_address of their customer.",
            "$ref": "#/components/schemas/email"
          }
        }
      },
      "definitions-payment_options": {
        "type": "object",
        "title": "Payment Options",
        "description": "The payment options for this transaction.",
        "properties": {
          "allowed_payment_method": {
            "type": "string",
            "description": "The payment method for this transaction. This field does not apply to the credit card payment method.",
            "x-enumDescriptions": [
              {
                "value": "UNRESTRICTED",
                "description": " Merchant does not have a preference on how they want the customer to pay."
              },
              {
                "value": "INSTANT_FUNDING_SOURCE",
                "description": "Merchant requires that the customer pays with an instant funding source, such as a credit card or PayPal balance. All payments are processed instantly. However, payments that require a manual review are marked as pending. Merchants must handle the pending state as if the payment is not yet complete."
              },
              {
                "value": "IMMEDIATE_PAY",
                "description": "Processes all payments immediately. Any payment that requires a manual review is marked failed."
              }
            ],
            "default": "UNRESTRICTED",
            "enum": ["UNRESTRICTED", "INSTANT_FUNDING_SOURCE", "IMMEDIATE_PAY"]
          }
        }
      },
      "definitions-phone_number": {
        "description": "The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
        "type": "object",
        "title": "Phone",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 3,
            "pattern": "^[0-9]{1,3}?$"
          },
          "national_number": {
            "type": "string",
            "description": "The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "^[0-9]{1,14}?$"
          }
        },
        "required": ["country_code", "national_number"]
      },
      "detailed_refund": {
        "type": "object",
        "title": "Detailed Refund",
        "description": "The refund transaction details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/refund-2"
          },
          {
            "properties": {
              "custom": {
                "type": "string",
                "description": "The note to the payer in this transaction.",
                "maxLength": 127
              },
              "invoice_number": {
                "type": "string",
                "description": "The invoice number to track this payment.",
                "maxLength": 127
              },
              "refund_from_transaction_fee": {
                "description": "The currency and amount of the transaction fee that is refunded to original the recipient of payment.",
                "$ref": "#/components/schemas/currency"
              },
              "refund_from_received_amount": {
                "description": "The currency and amount of the refund that is subtracted from the original payment recipient's PayPal balance.",
                "$ref": "#/components/schemas/currency"
              },
              "total_refunded_amount": {
                "description": "The currency and amount of the total refund from the original purchase. For example, if a payer makes $100 purchase and the payer was refunded $20 a week ago and $30 in this transaction, the gross refund amount is $30 for this transaction and the total refunded amount is $50.",
                "$ref": "#/components/schemas/currency"
              }
            }
          }
        ]
      },
      "details": {
        "type": "object",
        "title": "Payment Amount Details",
        "description": "The additional details about the payment amount.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the amount <code>details</code> object.</blockquote>",
        "properties": {
          "subtotal": {
            "type": "string",
            "description": "The subtotal amount for the items. If the request includes line items, this property is **required**. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>subtotal</code> parameter.</blockquote>"
          },
          "shipping": {
            "type": "string",
            "description": "The shipping fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>shipping</code> parameter.</blockquote>"
          },
          "tax": {
            "type": "string",
            "description": "The tax. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>tax</code> parameter.</blockquote>"
          },
          "handling_fee": {
            "type": "string",
            "description": "The handling fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>handling_fee</code> parameter.</blockquote>"
          },
          "shipping_discount": {
            "type": "string",
            "description": "The shipping fee discount. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>shipping_discount</code> parameter.</blockquote>"
          },
          "insurance": {
            "type": "string",
            "description": "The insurance fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported only for the PayPal payment method.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>insurance</code> parameter.</blockquote>"
          },
          "gift_wrap": {
            "type": "string",
            "description": "The gift wrap fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>gift_wrap</code> parameter.</blockquote>",
            "deprecated": true
          }
        }
      },
      "email": {
        "type": "string",
        "description": "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
        "format": "merchant_common_email_address_v2",
        "maxLength": 254,
        "minLength": 3,
        "pattern": "(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
      },
      "email_address": {
        "type": "string",
        "description": "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
        "format": "ppaas_common_email_address_v2",
        "minLength": 3,
        "maxLength": 254,
        "pattern": "^(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$"
      },
      "eps_request": {
        "type": "object",
        "title": "EPS payment request",
        "description": "Information needed to pay using eps.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "error": {
        "type": "object",
        "title": "Error",
        "description": "The error details.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human-readable, unique name of the error."
          },
          "message": {
            "type": "string",
            "description": "The message that describes the error."
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          },
          "details": {
            "$ref": "#/components/schemas/error_details_list"
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        },
        "required": ["name", "message", "debug_id"]
      },
      "error_400": {
        "type": "object",
        "title": "Bad Request Error",
        "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["INVALID_REQUEST"]
          },
          "message": {
            "type": "string",
            "enum": [
              "Request is not well-formed, syntactically incorrect, or violates schema."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_401": {
        "type": "object",
        "title": "Unauthorized Error",
        "description": "Authentication failed due to missing Authorization header, or invalid authentication credentials.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["AUTHENTICATION_FAILURE"]
          },
          "message": {
            "type": "string",
            "enum": [
              "Authentication failed due to missing authorization header, or invalid authentication credentials."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_403": {
        "type": "object",
        "title": "Not Authorized Error",
        "description": "The client is not authorized to access this resource, although it may have valid credentials. ",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["NOT_AUTHORIZED"]
          },
          "message": {
            "type": "string",
            "enum": ["Authorization failed due to insufficient permissions."]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_404": {
        "type": "object",
        "title": "Not found Error",
        "description": "The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["RESOURCE_NOT_FOUND"]
          },
          "message": {
            "type": "string",
            "enum": ["The specified resource does not exist."]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_409": {
        "type": "object",
        "title": "Resource Conflict Error",
        "description": "The server has detected a conflict while processing this request.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["RESOURCE_CONFLICT"]
          },
          "message": {
            "type": "string",
            "enum": [
              "The server has detected a conflict while processing this request."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_415": {
        "type": "object",
        "title": "Unsupported Media Type Error",
        "description": "The server does not support the request payload's media type.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["UNSUPPORTED_MEDIA_TYPE"]
          },
          "message": {
            "type": "string",
            "enum": [
              "The server does not support the request payload's media type."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_422": {
        "type": "object",
        "title": "Unprocessable Entity Error",
        "description": "The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["UNPROCESSABLE_ENTITY"]
          },
          "message": {
            "type": "string",
            "enum": [
              "The requested action could not be performed, semantically incorrect, or failed business validation."
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error_details"
            }
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        }
      },
      "error_500": {
        "type": "object",
        "title": "Internal Server Error",
        "description": "This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["INTERNAL_SERVER_ERROR"]
          },
          "message": {
            "type": "string",
            "enum": ["An internal server error occurred."]
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        },
        "example": {
          "name": "INTERNAL_SERVER_ERROR",
          "message": "An internal server error occurred.",
          "debug_id": "90957fca61718",
          "links": [
            {
              "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
              "rel": "information_link"
            }
          ]
        }
      },
      "error_503": {
        "type": "object",
        "title": "Service Unavailable Error",
        "description": "The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.",
        "properties": {
          "name": {
            "type": "string",
            "enum": ["SERVICE_UNAVAILABLE"]
          },
          "message": {
            "type": "string",
            "enum": ["Service Unavailable."]
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "links": {
            "description": "An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS).",
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/error_link_description"
            }
          }
        },
        "example": {
          "name": "SERVICE_UNAVAILABLE",
          "message": "Service Unavailable.",
          "debug_id": "90957fca61718",
          "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
        }
      },
      "error_default": {
        "description": "The default error response.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/error_400"
          },
          {
            "$ref": "#/components/schemas/error_401"
          },
          {
            "$ref": "#/components/schemas/error_403"
          },
          {
            "$ref": "#/components/schemas/error_404"
          },
          {
            "$ref": "#/components/schemas/error_409"
          },
          {
            "$ref": "#/components/schemas/error_415"
          },
          {
            "$ref": "#/components/schemas/error_422"
          },
          {
            "$ref": "#/components/schemas/error_500"
          },
          {
            "$ref": "#/components/schemas/error_503"
          }
        ]
      },
      "error_details": {
        "title": "Error Details",
        "type": "object",
        "description": "The error details. Required for client-side `4XX` errors.",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors."
          },
          "value": {
            "type": "string",
            "description": "The value of the field that caused the error."
          },
          "location": {
            "$ref": "#/components/schemas/error_location"
          },
          "issue": {
            "type": "string",
            "description": "The unique, fine-grained application-level error code."
          },
          "description": {
            "type": "string",
            "description": "The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value."
          }
        },
        "required": ["issue"]
      },
      "error_details-2": {
        "title": "Error Details",
        "type": "object",
        "description": "The error details. Required for client-side `4XX` errors.",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors."
          },
          "value": {
            "type": "string",
            "description": "The value of the field that caused the error."
          },
          "location": {
            "type": "string",
            "description": "The location of the field that caused the error. Value is `body`, `path`, or `query`.",
            "default": "body"
          },
          "issue": {
            "type": "string",
            "description": "The unique, fine-grained application-level error code."
          },
          "description": {
            "type": "string",
            "description": "The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value."
          }
        },
        "required": ["issue"]
      },
      "error_details_list": {
        "type": "array",
        "description": "An array of additional details about the error.",
        "items": {
          "$ref": "#/components/schemas/error_details-2"
        }
      },
      "error_link_description": {
        "title": "Link Description",
        "description": "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.",
        "type": "object",
        "required": ["href", "rel"],
        "properties": {
          "href": {
            "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.",
            "type": "string",
            "minLength": 0,
            "maxLength": 20000,
            "pattern": "^.*$"
          },
          "rel": {
            "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).",
            "type": "string",
            "minLength": 0,
            "maxLength": 100,
            "pattern": "^.*$"
          },
          "method": {
            "description": "The HTTP method required to make the related call.",
            "type": "string",
            "minLength": 3,
            "maxLength": 6,
            "pattern": "^[A-Z]*$",
            "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"]
          }
        }
      },
      "error_location": {
        "type": "string",
        "description": "The location of the field that caused the error. Value is `body`, `path`, or `query`.",
        "enum": ["body", "path", "query"],
        "default": "body"
      },
      "experience_context_base": {
        "type": "object",
        "title": "Experience Context Base",
        "description": "Customizes the payer experience during the approval process for the payment.",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$"
          },
          "locale": {
            "description": "The BCP 47-formatted locale of pages that the PayPal payment experience shows. PayPal supports a five-character code. For example, `da-DK`, `he-IL`, `id-ID`, `ja-JP`, `no-NO`, `pt-BR`, `ru-RU`, `sv-SE`, `th-TH`, `zh-CN`, `zh-HK`, or `zh-TW`.",
            "$ref": "#/components/schemas/language"
          },
          "shipping_preference": {
            "type": "string",
            "description": "The location from which the shipping address is derived.",
            "minLength": 1,
            "maxLength": 24,
            "pattern": "^[A-Z_]+$",
            "default": "GET_FROM_FILE",
            "x-enumDescriptions": [
              {
                "value": "GET_FROM_FILE",
                "description": "Get the customer-provided shipping address on the PayPal site."
              },
              {
                "value": "NO_SHIPPING",
                "description": "Redacts the shipping address from the PayPal site. Recommended for digital goods."
              },
              {
                "value": "SET_PROVIDED_ADDRESS",
                "description": "Get the merchant-provided address. The customer cannot change this address on the PayPal site. If merchant does not pass an address, customer can choose the address on PayPal pages."
              }
            ],
            "enum": ["GET_FROM_FILE", "NO_SHIPPING", "SET_PROVIDED_ADDRESS"]
          },
          "return_url": {
            "description": "The URL where the customer is redirected after the customer approves the payment.",
            "format": "uri",
            "$ref": "#/components/schemas/url"
          },
          "cancel_url": {
            "description": "The URL where the customer is redirected after the customer cancels the payment.",
            "format": "uri",
            "$ref": "#/components/schemas/url"
          }
        }
      },
      "fmf_details": {
        "type": "object",
        "title": "FMF Details",
        "description": "The Fraud Management Filter (FMF) details that are applied to the payment that result in an accept, deny, or pending action. Returned in a payment response only if the merchant has enabled FMF in the profile settings and one of the fraud filters was triggered based on those settings. For more information, see [Fraud Management Filters Summary](/docs/classic/fmf/integration-guide/FMFSummary/).",
        "properties": {
          "filter_type": {
            "type": "string",
            "description": "The filter type.",
            "x-enumDescriptions": [
              {
                "value": "ACCEPT",
                "description": "The accept filter type."
              },
              {
                "value": "PENDING",
                "description": "The pending filter type."
              },
              {
                "value": "DENY",
                "description": "The deny filter type."
              },
              {
                "value": "REPORT",
                "description": "The report filter type."
              }
            ],
            "readOnly": true,
            "enum": ["ACCEPT", "PENDING", "DENY", "REPORT"]
          },
          "filter_id": {
            "type": "string",
            "description": "The filter ID.",
            "x-enumDescriptions": [
              {
                "value": "AVS_NO_MATCH",
                "description": "AVS no match."
              },
              {
                "value": "AVS_PARTIAL_MATCH",
                "description": "AVS partial match."
              },
              {
                "value": "AVS_UNAVAILABLE_OR_UNSUPPORTED",
                "description": "AVS unavailable or unsupported."
              },
              {
                "value": "CARD_SECURITY_CODE_MISMATCH",
                "description": "Card security code mismatch."
              },
              {
                "value": "MAXIMUM_TRANSACTION_AMOUNT",
                "description": "The maximum transaction amount."
              },
              {
                "value": "UNCONFIRMED_ADDRESS",
                "description": "Unconfirmed address."
              },
              {
                "value": "COUNTRY_MONITOR",
                "description": "Country monitor."
              },
              {
                "value": "LARGE_ORDER_NUMBER",
                "description": "Large order number."
              },
              {
                "value": "BILLING_OR_SHIPPING_ADDRESS_MISMATCH",
                "description": "Billing or shipping address mismatch."
              },
              {
                "value": "RISKY_ZIP_CODE",
                "description": "Risky zip code."
              },
              {
                "value": "SUSPECTED_FREIGHT_FORWARDER_CHECK",
                "description": "Suspected freight forwarder check."
              },
              {
                "value": "TOTAL_PURCHASE_PRICE_MINIMUM",
                "description": "Total purchase price minimum."
              },
              {
                "value": "IP_ADDRESS_VELOCITY",
                "description": "IP address velocity."
              },
              {
                "value": "RISKY_EMAIL_ADDRESS_DOMAIN_CHECK",
                "description": "Risky email address domain check."
              },
              {
                "value": "RISKY_BANK_IDENTIFICATION_NUMBER_CHECK",
                "description": "Risky bank identification number check."
              },
              {
                "value": "RISKY_IP_ADDRESS_RANGE",
                "description": "Risky IP address range."
              },
              {
                "value": "PAYPAL_FRAUD_MODEL",
                "description": "PayPal fraud model."
              }
            ],
            "readOnly": true,
            "enum": [
              "AVS_NO_MATCH",
              "AVS_PARTIAL_MATCH",
              "AVS_UNAVAILABLE_OR_UNSUPPORTED",
              "CARD_SECURITY_CODE_MISMATCH",
              "MAXIMUM_TRANSACTION_AMOUNT",
              "UNCONFIRMED_ADDRESS",
              "COUNTRY_MONITOR",
              "LARGE_ORDER_NUMBER",
              "BILLING_OR_SHIPPING_ADDRESS_MISMATCH",
              "RISKY_ZIP_CODE",
              "SUSPECTED_FREIGHT_FORWARDER_CHECK",
              "TOTAL_PURCHASE_PRICE_MINIMUM",
              "IP_ADDRESS_VELOCITY",
              "RISKY_EMAIL_ADDRESS_DOMAIN_CHECK",
              "RISKY_BANK_IDENTIFICATION_NUMBER_CHECK",
              "RISKY_IP_ADDRESS_RANGE",
              "PAYPAL_FRAUD_MODEL"
            ]
          },
          "name": {
            "type": "string",
            "description": "The filter name.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The filter description.",
            "readOnly": true
          }
        },
        "required": ["filter_type", "filter_id"]
      },
      "full_name": {
        "type": "string",
        "description": "The full name representation like Mr J Smith.",
        "minLength": 3,
        "maxLength": 300
      },
      "funding_instrument": {
        "type": "object",
        "title": "Funding Instrument",
        "description": "The funding instrument details. An instance of this schema is valid if and only if it validates against exactly one of these supported properties.",
        "properties": {
          "credit_card_token": {
            "description": "The tokenized credit card details. You can use this instrument to fund a payment.",
            "$ref": "#/components/schemas/credit_card_token"
          }
        }
      },
      "funding_instrument_list": {
        "type": "array",
        "description": "An array of a single funding instrument for the current payment. Valid only and required for the credit card payment method. The array must include either a `credit_card` or `credit_card_token` object. If the array contains more than one instrument, the payment is declined.",
        "items": {
          "$ref": "#/components/schemas/funding_instrument"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "giropay_request": {
        "type": "object",
        "title": "Giropay payment request",
        "description": "Information needed to pay using giropay.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "google_pay_decrypted_token_data": {
        "type": "object",
        "title": "Google Pay payment request object",
        "description": "Details shared by Google for the merchant to be shared with PayPal. This is required to process the transaction using the Google Pay payment method.",
        "properties": {
          "message_id": {
            "description": "A unique ID that identifies the message in case it needs to be revoked or located at a later time.",
            "type": "string",
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^.*$"
          },
          "message_expiration": {
            "description": "Date and time at which the message expires as UTC milliseconds since epoch. Integrators should reject any message that's expired.",
            "type": "string",
            "pattern": "\\d{13}",
            "minLength": 13,
            "maxLength": 13
          },
          "payment_method": {
            "description": "The type of the payment credential. Currently, only CARD is supported.",
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "x-enumDescriptions": [
              {
                "value": "CARD",
                "description": "CARD is the only value that Google Pay accepts."
              }
            ],
            "enum": ["CARD"]
          },
          "authentication_method": {
            "description": "Authentication Method which is used for the card transaction.",
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "x-enumDescriptions": [
              {
                "value": "PAN_ONLY",
                "description": "This authentication method is associated with payment cards stored on file with the user's Google Account. Returned payment data includes primary account number (PAN) with the expiration month and the expiration year."
              },
              {
                "value": "CRYPTOGRAM_3DS",
                "description": "Returned payment data includes a 3-D Secure (3DS) cryptogram generated on the device. -> If authentication_method=CRYPTOGRAM, it is required that 'cryptogram' parameter in the request has a valid 3-D Secure (3DS) cryptogram generated on the device."
              }
            ],
            "enum": ["PAN_ONLY", "CRYPTOGRAM_3DS"]
          },
          "cryptogram": {
            "description": "Base-64 cryptographic identifier used by card schemes to validate the token verification result. This is a conditionally required field if authentication_method is CRYPTOGRAM_3DS.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "eci_indicator": {
            "description": "Electronic Commerce Indicator may not always be present. It is only returned for tokens on the Visa card network. This value is passed through in the payment authorization request.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^.*$"
          }
        },
        "required": ["payment_method", "card", "authentication_method"]
      },
      "google_pay_request": {
        "type": "object",
        "title": "Google Pay payment request object",
        "description": "Information needed to pay using Google Pay.",
        "properties": {
          "name": {
            "description": "Name on the account holder associated with Google Pay.",
            "$ref": "#/components/schemas/full_name"
          },
          "email_address": {
            "description": "The email address of the account holder associated with Google Pay.",
            "$ref": "#/components/schemas/email_address"
          },
          "phone_number": {
            "$ref": "#/components/schemas/definitions-phone_number"
          },
          "card": {
            "description": "The payment card information."
          },
          "decrypted_token": {
            "description": "The decrypted payload details for the Google Pay token.",
            "$ref": "#/components/schemas/google_pay_decrypted_token_data"
          },
          "assurance_details": {
            "description": "Information about what validation has been performed on the returned payment credentials.",
            "$ref": "#/components/schemas/assurance_details"
          },
          "attributes": {
            "$ref": "#/components/schemas/attributes"
          }
        }
      },
      "ideal_request": {
        "type": "object",
        "title": "iDEAL payment request",
        "description": "Information needed to pay using iDEAL.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "bic": {
            "description": "The bank identification code (BIC).",
            "$ref": "#/components/schemas/bic"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "ip_address": {
        "type": "string",
        "title": "IP Address",
        "description": "An Internet Protocol address (IP address). This address assigns a numerical label to each device that is connected to a computer network through the Internet Protocol. Supports IPv4 and IPv6 addresses.",
        "format": "ppaas_ip_address_v1",
        "minLength": 7,
        "maxLength": 39,
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$"
      },
      "item": {
        "type": "object",
        "title": "Item",
        "description": "The item details.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock keeping unit (SKU) for the item.",
            "maxLength": 127
          },
          "name": {
            "type": "string",
            "description": "The item name. If this value is greater than the maximum allowed length, the API truncates the string.",
            "maxLength": 127
          },
          "description": {
            "type": "string",
            "description": "The item description. Supported for only the PayPal payment method.",
            "maxLength": 127
          },
          "quantity": {
            "type": "string",
            "description": "The item quantity. Must be a whole number.",
            "maxLength": 10,
            "pattern": "^[0-9]{0,10}$"
          },
          "price": {
            "type": "string",
            "description": "The item cost. Supports two decimal places.",
            "maxLength": 10,
            "pattern": "^[0-9]{0,10}(\\.[0-9]{0,2})?$"
          },
          "currency": {
            "$ref": "#/components/schemas/currency_code-2"
          },
          "tax": {
            "type": "string",
            "description": "The item tax. Supported only for the PayPal payment method."
          }
        },
        "required": ["quantity", "price", "currency"]
      },
      "item_list": {
        "type": "array",
        "description": "An array of items that are being purchased.",
        "items": {
          "$ref": "#/components/schemas/item"
        }
      },
      "language": {
        "type": "string",
        "description": "The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).",
        "format": "ppaas_common_language_v3",
        "maxLength": 10,
        "minLength": 2,
        "pattern": "^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}|[0-9]{3}))?$"
      },
      "link_description": {
        "type": "object",
        "title": "Link Description",
        "description": "The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.",
        "required": ["href", "rel"],
        "properties": {
          "href": {
            "type": "string",
            "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call."
          },
          "rel": {
            "type": "string",
            "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml)."
          },
          "method": {
            "type": "string",
            "description": "The HTTP method required to make the related call.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "HEAD",
              "CONNECT",
              "OPTIONS",
              "PATCH"
            ]
          }
        }
      },
      "link_description_list": {
        "type": "array",
        "description": "An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/link_description"
        }
      },
      "merchant_partner_customer_id": {
        "type": "string",
        "description": "The unique ID for a customer generated by PayPal.",
        "minLength": 1,
        "maxLength": 22,
        "pattern": "^[0-9a-zA-Z_-]+$"
      },
      "money": {
        "type": "object",
        "title": "Money",
        "description": "The currency and amount for a financial transaction, such as a balance or payment due.",
        "properties": {
          "currency_code": {
            "$ref": "#/components/schemas/currency_code"
          },
          "value": {
            "type": "string",
            "description": "The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).",
            "maxLength": 32,
            "pattern": "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$"
          }
        },
        "required": ["currency_code", "value"]
      },
      "mybank_request": {
        "type": "object",
        "title": "MyBank payment request",
        "description": "Information needed to pay using MyBank.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "name": {
        "description": "The name of the party.",
        "type": "object",
        "title": "Name",
        "properties": {
          "given_name": {
            "type": "string",
            "description": "When the party is a person, the party's given, or first, name.",
            "maxLength": 140
          },
          "surname": {
            "type": "string",
            "description": "When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.",
            "maxLength": 140
          }
        }
      },
      "network_transaction_reference": {
        "type": "object",
        "title": "Network Transaction Reference",
        "description": "Reference values used by the card network to identify a transaction.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 9,
            "maxLength": 36,
            "pattern": "^[a-zA-Z0-9-_@.:&+=*^'~#!$%()]+$",
            "description": "Transaction reference id returned by the scheme. For Visa and Amex, this is the \"Tran id\" field in response. For MasterCard, this is the \"BankNet reference id\" field in response. For Discover, this is the \"NRID\" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -."
          },
          "date": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "pattern": "^[0-9]+$",
            "description": "The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as \"BankNet reference date."
          },
          "network": {
            "description": "Name of the card network through which the transaction was routed.",
            "$ref": "#/components/schemas/card_brand"
          },
          "acquirer_reference_number": {
            "type": "string",
            "description": "Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.",
            "minLength": 1,
            "maxLength": 36,
            "pattern": "^[a-zA-Z0-9]+$"
          }
        },
        "required": ["id"]
      },
      "order": {
        "type": "object",
        "title": "Order",
        "description": "The order transaction details.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the order transaction."
          },
          "amount": {
            "description": "The amount to collect.<blockquote><strong>Note:</strong> For an order authorization, you cannot include amount <code>details</code>.</blockquote>",
            "$ref": "#/components/schemas/amount"
          },
          "payment_mode": {
            "type": "string",
            "description": "The transaction payment mode.",
            "readOnly": true,
            "x-enumDescriptions": [
              {
                "value": "INSTANT_TRANSFER",
                "description": "The payment mode is instant transfer."
              },
              {
                "value": "MANUAL_BANK_TRANSFER",
                "description": "The payment mode is manual bank transfer."
              },
              {
                "value": "DELAYED_TRANSFER",
                "description": "The payment mode is delayed transfer."
              },
              {
                "value": "ECHECK",
                "description": "The payment mode is eCheck."
              }
            ],
            "enum": [
              "INSTANT_TRANSFER",
              "MANUAL_BANK_TRANSFER",
              "DELAYED_TRANSFER",
              "ECHECK"
            ]
          },
          "state": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "PENDING",
                "description": "The order was created but no authorizations or captures were made against the order."
              },
              {
                "value": "AUTHORIZED",
                "description": "The order has only been authorized. No capture was made against the order."
              },
              {
                "value": "CAPTURED",
                "description": "The order has at least one capture initiated."
              },
              {
                "value": "COMPLETED",
                "description": "The order is complete. A capture was made against the order with <code>is_final_capture</code> set to <code>TRUE</code>. No more authorizations or captures can be made against this order."
              },
              {
                "value": "VOIDED",
                "description": "The order was voided. No more authorizations or captures can be made against this order."
              }
            ],
            "description": "The state of the order transaction.",
            "readOnly": true,
            "enum": ["PENDING", "AUTHORIZED", "CAPTURED", "COMPLETED", "VOIDED"]
          },
          "reason_code": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "PAYER_SHIPPING_UNCONFIRMED",
                "description": "The shipping address of the payer is not confirmed."
              },
              {
                "value": "MULTI_CURRENCY",
                "description": "The transaction is in multiple currencies."
              },
              {
                "value": "RISK_REVIEW",
                "description": "The transaction is under risk review."
              },
              {
                "value": "REGULATORY_REVIEW",
                "description": "The transaction is under regulatory review."
              },
              {
                "value": "VERIFICATION_REQUIRED",
                "description": "Verification is required."
              },
              {
                "value": "ORDER",
                "description": "The transaction is an order."
              },
              {
                "value": "OTHER",
                "description": "Other."
              }
            ],
            "description": "The reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.",
            "readOnly": true,
            "enum": [
              "PAYER_SHIPPING_UNCONFIRMED",
              "MULTI_CURRENCY",
              "RISK_REVIEW",
              "REGULATORY_REVIEW",
              "VERIFICATION_REQUIRED",
              "ORDER",
              "OTHER"
            ]
          },
          "pending_reason": {
            "type": "string",
            "enum": [
              "payer_shipping_unconfirmed",
              "multi_currency",
              "risk_review",
              "regulatory_review",
              "verification_required",
              "order",
              "other"
            ],
            "description": "Deprecated. The reason code for the pending transaction state. Obsolete. Use `reason_code` instead.",
            "readOnly": true
          },
          "protection_eligibility": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "ELIGIBLE",
                "description": "The transaction is eligible for seller protection."
              },
              {
                "value": "PARTIALLY_ELIGIBLE",
                "description": "The transaction is partially eligible for seller protection."
              },
              {
                "value": "INELIGIBLE",
                "description": "The transaction is ineligible for seller protection."
              }
            ],
            "description": "The level of seller protection in effect for the transaction.",
            "readOnly": true,
            "enum": ["ELIGIBLE", "PARTIALLY_ELIGIBLE", "INELIGIBLE"]
          },
          "protection_eligibility_type": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "ITEM_NOT_RECEIVED_ELIGIBLE",
                "description": "Sellers are protected against claims for items not received."
              },
              {
                "value": "UNAUTHORIZED_PAYMENT_ELIGIBLE",
                "description": "Sellers are protected against claims for unauthorized payments."
              },
              {
                "value": "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE",
                "description": "Sellers are protected against claims for items not received and claims for unauthorized payments."
              }
            ],
            "description": "The kind of seller protection in effect for the transaction. Returned only when the `protection_eligibility` property is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported only for PayPal payments.",
            "readOnly": true,
            "enum": [
              "ITEM_NOT_RECEIVED_ELIGIBLE",
              "UNAUTHORIZED_PAYMENT_ELIGIBLE",
              "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE"
            ]
          },
          "parent_payment": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the payment on which this transaction is based."
          },
          "fmf_details": {
            "$ref": "#/components/schemas/fmf_details"
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        },
        "required": ["amount"]
      },
      "p24_request": {
        "type": "object",
        "title": "P24 payment request",
        "description": "Information needed to pay using P24 (Przelewy24).",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "email": {
            "description": "The email address of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/email_address"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "email", "country_code"]
      },
      "patch": {
        "type": "object",
        "title": "Patch",
        "description": "The JSON patch object to apply partial updates to resources.",
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation.",
            "x-enumDescriptions": [
              {
                "value": "add",
                "description": "Depending on the target location reference, completes one of these functions:<ul><li><strong>The target location is an array index</strong>. Inserts a new value into the array at the specified index.</li><li><strong>The target location is an object parameter that does not already exist</strong>. Adds a new parameter to the object.</li><li><strong>The target location is an object parameter that does exist</strong>. Replaces that parameter's value.</li></ul>The <code>value</code> parameter defines the value to add. For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.1\">4.1. add</a>."
              },
              {
                "value": "remove",
                "description": "Removes the value at the target location. For the operation to succeed, the target location must exist. For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.2\">4.2. remove</a>."
              },
              {
                "value": "replace",
                "description": "Replaces the value at the target location with a new value. The operation object must contain a <code>value</code> parameter that defines the replacement value. For the operation to succeed, the target location must exist. For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.3\">4.3. replace</a>."
              },
              {
                "value": "move",
                "description": "Removes the value at a specified location and adds it to the target location. The operation object must contain a <code>from</code> parameter, which is a string that contains a JSON pointer value that references the location in the target document from which to move the value. For the operation to succeed, the <code>from</code> location must exist. For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.4\">4.4. move</a>."
              },
              {
                "value": "copy",
                "description": "Copies the value at a specified location to the target location. The operation object must contain a <code>from</code> parameter, which is a string that contains a JSON pointer value that references the location in the target document from which to copy the value. For the operation to succeed, the <code>from</code> location must exist. For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.5\">4.5. copy</a>."
              },
              {
                "value": "test",
                "description": "Tests that a value at the target location is equal to a specified value. The operation object must contain a <code>value</code> parameter that defines the value to compare to the target location's value. For the operation to succeed, the target location must be equal to the <code>value</code> value. For test, <code>equal</code> indicates that the value at the target location and the value that <code>value</code> defines are of the same JSON type. The data type of the value determines how equality is defined:<table><thead align=\"left\"><tr><th>Type</th><th>Considered equal if both values</th></tr></thead><tbody align=\"left\"><tr><td><strong>strings</strong></td><td>Contain the same number of Unicode characters and their code points are byte-by-byte equal.</td></tr><tr><td><strong>numbers</strong></td><td>Are numerically equal.</td></tr><tr><td><strong>arrays</strong></td><td>Contain the same number of values, and each value is equal to the value at the corresponding position in the other array, by using these type-specific rules.</td></tr><tr><td><strong>objects</strong></td><td>Contain the same number of parameters, and each parameter is equal to a parameter in the other object, by comparing their keys (as strings) and their values (by using these type-specific rules).</td></tr><tr><td><strong>literals (<code>false</code>, <code>true</code>, and <code>null</code>)</strong></td><td>Are the same. The comparison is a logical comparison. For example, whitespace between the parameter values of an array is not significant. Also, ordering of the serialization of object parameters is not significant.</td></tr></tbody></table>For more information, see <a href=\"https://tools.ietf.org/html/rfc6902#section-4.6\">4.6. test</a>."
              }
            ],
            "enum": ["add", "remove", "replace", "move", "copy", "test"]
          },
          "path": {
            "type": "string",
            "description": "The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location at which to complete the operation."
          },
          "value": {
            "type": [
              "number",
              "integer",
              "string",
              "boolean",
              "null",
              "array",
              "object"
            ],
            "title": "Patch Value",
            "description": "The value to apply. The <code>remove</code> operation does not require a value."
          },
          "from": {
            "type": "string",
            "description": "The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation."
          }
        },
        "required": ["op"]
      },
      "patch_request": {
        "type": "array",
        "title": "Patch Request",
        "description": "An array of JSON patch objects to apply partial updates to resources.",
        "items": {
          "$ref": "#/components/schemas/patch"
        }
      },
      "payee": {
        "type": "object",
        "title": "Payee",
        "description": "The payee who receives the funds and fulfills the order.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address associated with the payee's PayPal account. For an intent of authorize or order, the email address must be associated with a confirmed PayPal business account. For an intent of sale, the email can either:<ul><li>Be associated with a confirmed PayPal personal or business account.</li><li>Not be associated with a PayPal account.</li></ul>"
          },
          "merchant_id": {
            "type": "string",
            "description": "The PayPal account ID for the payee."
          }
        }
      },
      "payer": {
        "type": "object",
        "title": "Payer",
        "description": "The payer. The payer funds the payment.",
        "properties": {
          "payment_method": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "credit_card",
                "description": "Credit card."
              },
              {
                "value": "paypal",
                "description": "A PayPal Wallet payment."
              },
              {
                "value": "pay_upon_invoice",
                "description": "Pay upon invoice."
              },
              {
                "value": "carrier",
                "description": "Carrier."
              },
              {
                "value": "alternate_payment",
                "description": "Alternate payment."
              },
              {
                "value": "bank",
                "description": "Bank."
              }
            ],
            "minLength": 4,
            "maxLength": 17,
            "description": "The payment method.",
            "enum": [
              "credit_card",
              "paypal",
              "pay_upon_invoice",
              "carrier",
              "alternate_payment",
              "bank"
            ]
          },
          "status": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "VERIFIED",
                "description": ""
              },
              {
                "value": "UNVERIFIED",
                "description": ""
              }
            ],
            "minLength": 8,
            "maxLength": 10,
            "description": "The status of payer's PayPal account.",
            "readOnly": true,
            "enum": ["VERIFIED", "UNVERIFIED"]
          },
          "funding_instruments": {
            "$ref": "#/components/schemas/funding_instrument_list"
          },
          "payer_info": {
            "$ref": "#/components/schemas/payer_info"
          }
        }
      },
      "payer_info": {
        "type": "object",
        "title": "Payer Information",
        "description": "The payer information.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The payer's email address. Maximum length is 127 characters."
          },
          "salutation": {
            "type": "string",
            "description": "The payer's salutation.",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "description": "The payer's first name.",
            "readOnly": true
          },
          "middle_name": {
            "type": "string",
            "description": "The payer's middle name.",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "description": "The payer's last name.",
            "readOnly": true
          },
          "suffix": {
            "type": "string",
            "description": "The payer's suffix.",
            "readOnly": true
          },
          "payer_id": {
            "type": "string",
            "description": "The PayPal-assigned encrypted payer ID.",
            "readOnly": true
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "description": "The birth date of the payer, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `1990-04-12`."
          },
          "tax_id": {
            "type": "string",
            "description": "The payer's tax ID. Supported for the PayPal payment method only.",
            "maxLength": 14
          },
          "tax_id_type": {
            "type": "string",
            "description": "The payer's tax ID type. Supported for the PayPal payment method only.",
            "x-enumDescriptions": [
              {
                "value": "BR_CPF",
                "description": "BR CPF tax ID type."
              },
              {
                "value": "BR_CNPJ",
                "description": "BR CNPJ tax ID type."
              }
            ],
            "enum": ["BR_CPF", "BR_CNPJ"]
          },
          "billing_address": {
            "$ref": "#/components/schemas/address",
            "description": "The payer's billing address."
          },
          "shipping_address": {
            "$ref": "#/components/schemas/shipping_address",
            "description": "Deprecated. The shipping address. Use the shipping address for the purchase unit or at the root level of the checkout session.",
            "readOnly": true
          }
        }
      },
      "payment": {
        "type": "object",
        "title": "Payment",
        "description": "The payment details.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment.",
            "readOnly": true
          },
          "intent": {
            "type": "string",
            "description": "The payment intent. Value is:<ul><li><code>sale</code>. Makes an immediate payment.</li><li><code>authorize</code>. [Authorizes a payment for capture later](/docs/integration/direct/payments/authorize-and-capture-payments/).</li><li><code>order</code>. [Creates an order](/docs/integration/direct/payments/orders/).</li></ul>",
            "enum": ["sale", "authorize", "order"]
          },
          "payer": {
            "description": "The source of the funds for this payment. Payment method is PayPal Wallet payment or bank direct debit.",
            "$ref": "#/components/schemas/payer"
          },
          "application_context": {
            "description": "Use the application context resource to customize payment flow experience for your buyers.",
            "$ref": "#/components/schemas/application_context"
          },
          "transactions": {
            "$ref": "#/components/schemas/transaction_list"
          },
          "state": {
            "type": "string",
            "description": "The state of the payment, authorization, or order transaction. Value is:<ul><li><code>created</code>. The transaction was successfully created.</li><li><code>approved</code>. The customer approved the transaction. The state changes from <code>created</code> to <code>approved</code> on generation of the <code>sale_id</code> for sale transactions, <code>authorization_id</code> for authorization transactions, or <code>order_id</code> for order transactions.</li><li><code>failed</code>. The transaction request failed.</li></ul>",
            "enum": [
              "created",
              "approved",
              "failed",
              "partially_completed",
              "in_progress"
            ],
            "readOnly": true
          },
          "experience_profile_id": {
            "type": "string",
            "description": "Deprecated. The PayPal-generated ID for the merchant's payment experience profile. For information, see [create web experience profile](/docs/api/payment-experience/v1/#web-profiles_create). Use application_context instead."
          },
          "note_to_payer": {
            "type": "string",
            "description": "A free-form field that clients can use to send a note to the payer.",
            "maxLength": 165
          },
          "redirect_urls": {
            "$ref": "#/components/schemas/redirect_urls"
          },
          "failure_reason": {
            "type": "string",
            "description": "The reason code for a payment failure.",
            "enum": [
              "UNABLE_TO_COMPLETE_TRANSACTION",
              "INVALID_PAYMENT_METHOD",
              "PAYER_CANNOT_PAY",
              "CANNOT_PAY_THIS_PAYEE",
              "REDIRECT_REQUIRED",
              "PAYEE_FILTER_RESTRICTIONS"
            ],
            "readOnly": true
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the payment was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the payment was updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        },
        "required": ["intent", "payer"]
      },
      "payment_execution": {
        "type": "object",
        "title": "Payment Execution",
        "description": "Executes a PayPal account-based payment with the `payer_id` obtained from the web approval URL.",
        "properties": {
          "payer_id": {
            "type": "string",
            "description": "The ID of the payer that PayPal passes in the `return_url`."
          },
          "transactions": {
            "$ref": "#/components/schemas/cart_base_list"
          }
        }
      },
      "payment_history": {
        "type": "object",
        "title": "Payment History ",
        "description": "An array of merchant payments that are complete. Payments that you just created with the [create payment](/docs/api/payments/v1/#payment_create) call do not appear in the list.",
        "properties": {
          "payments": {
            "$ref": "#/components/schemas/payment_list"
          },
          "count": {
            "type": "integer",
            "description": "The number of items returned in each range of results. Note that the last results range might have fewer items than the requested number of items.",
            "maximum": 20
          },
          "next_id": {
            "type": "string",
            "description": "The ID of the element to use to get the next range of results.",
            "readOnly": true
          }
        }
      },
      "payment_hold_reason": {
        "type": "object",
        "title": "Related Resources",
        "description": "The payment-related financial transactions, which include sales, authorizations, captures, and refunds. To show resource details, use the resource ID. For example, to [show details for a related authorization](/docs/api/payments/v1/#authorization_get), use the ID returned in the `authorization` object. You can also use the [HATEOAS links](/docs/api/hateoas-links/) for a resource to complete operations for that resource. For example, a `sale` object provides a `refund` link that enables you to refund the sale.",
        "properties": {
          "payment_hold_reason": {
            "description": "The reason that PayPal holds the recipient fund. Set only if the payment hold status is `HELD`.",
            "type": "string",
            "enum": ["PAYMENT_HOLD", "SHIPPING_RISK_HOLD"]
          }
        }
      },
      "payment_hold_reason_list": {
        "type": "array",
        "readOnly": true,
        "description": "An array of reasons that PayPal holds the recipient fund. Set only if the payment hold status is `HELD`.",
        "items": {
          "$ref": "#/components/schemas/payment_hold_reason"
        }
      },
      "payment_initiator": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "The person or party who initiated or triggered the payment.",
        "x-enumDescriptions": [
          {
            "value": "CUSTOMER",
            "description": "Payment is initiated with the active engagement of the customer. e.g. a customer checking out on a merchant website."
          },
          {
            "value": "MERCHANT",
            "description": "Payment is initiated by merchant on behalf of the customer without the active engagement of customer. e.g. a merchant charging the monthly payment of a subscription to the customer."
          }
        ],
        "enum": ["CUSTOMER", "MERCHANT"]
      },
      "payment_list": {
        "type": "array",
        "description": "An array of payments that are complete. Payments that you just created with the [create payment](/docs/api/payments/v1/#payment_create) call do not appear in the list.",
        "items": {
          "$ref": "#/components/schemas/payment"
        }
      },
      "payment_options": {
        "type": "object",
        "title": "Payment Options",
        "description": "The payment options for this transaction.",
        "properties": {
          "allowed_payment_method": {
            "type": "string",
            "description": "The payment method for this transaction. This field does not apply to the credit card payment method.",
            "x-enumDescriptions": [
              {
                "value": "UNRESTRICTED",
                "description": "Merchant does not have a preference on how they want the customer to pay."
              },
              {
                "value": "INSTANT_FUNDING_SOURCE",
                "description": "Merchant requires that the customer pays with an instant funding source, such as a credit card or PayPal balance. All payments are processed instantly. However, payments that require a manual review are marked as pending. Merchants must handle the pending state as if the payment is not yet complete."
              },
              {
                "value": "IMMEDIATE_PAY",
                "description": "Processes all payments immediately. Any payment that requires a manual review is marked failed."
              }
            ],
            "default": "UNRESTRICTED",
            "enum": ["UNRESTRICTED", "INSTANT_FUNDING_SOURCE", "IMMEDIATE_PAY"]
          }
        }
      },
      "payment_pattern": {
        "type": "string",
        "description": "Provides context (e.g. frequency of payment (Single, Recurring) along with whether (Customer is Present, Not Present) for the payment being processed. For Card and PayPal Vaulted/Billing Agreement transactions, this helps specify the appropriate indicators to the networks (e.g. Mastercard, Visa) which ensures compliance as well as ensure a better auth-rate. For bank processing, indicates to clearing house whether the transaction is recurring or not depending on the option chosen.",
        "title": "Payment pattern",
        "minLength": 3,
        "maxLength": 255,
        "pattern": "^[A-Z_]+$",
        "x-enumDescriptions": [
          {
            "value": "CUSTOMER_PRESENT_ONETIME_PURCHASE",
            "description": "If the payments is an e-commerce payment initiated by the customer. Customer typically enters payment information (e.g. card number, approves payment within the PayPal Checkout flow) and such information that has not been previously stored on file."
          },
          {
            "value": "CUSTOMER_NOT_PRESENT_RECURRING",
            "description": "Subsequent recurring payments (e.g. subscriptions with a fixed amount on a predefined schedule when customer is not present."
          },
          {
            "value": "CUSTOMER_PRESENT_RECURRING_FIRST",
            "description": "The first payment initiated by the customer which is expected to be followed by a series of subsequent recurring payments transactions (e.g. subscriptions with a fixed amount on a predefined schedule when customer is not present. This is typically used for scenarios where customer stores credentials and makes a purchase on a given date and also set’s up a subscription."
          },
          {
            "value": "CUSTOMER_PRESENT_ONETIME_PURCHASE_VAULTED",
            "description": "Also known as (card-on-file) transactions. Payment details are stored to enable checkout with one-click, or simply to streamline the checkout process. For card transaction customers typically do not enter a CVC number as part of the Checkout process."
          },
          {
            "value": "CUSTOMER_NOT_PRESENT_ONETIME_PURCHASE_VAULTED",
            "description": "Unscheduled payments that are not recurring on a predefined schedule (e.g. balance top-up)."
          },
          {
            "value": "MAIL_ORDER_TELEPHONE_ORDER",
            "description": "Payments that are initiated by the customer via the merchant by mail or telephone."
          }
        ],
        "enum": [
          "CUSTOMER_PRESENT_ONETIME_PURCHASE",
          "CUSTOMER_NOT_PRESENT_RECURRING",
          "CUSTOMER_PRESENT_RECURRING_FIRST",
          "CUSTOMER_PRESENT_ONETIME_PURCHASE_VAULTED",
          "CUSTOMER_NOT_PRESENT_ONETIME_PURCHASE_VAULTED",
          "MAIL_ORDER_TELEPHONE_ORDER"
        ]
      },
      "paypal_wallet": {
        "type": "object",
        "title": "PayPal Wallet",
        "description": "A resource that identifies a PayPal Wallet is used for payment.",
        "properties": {
          "vault_id": {
            "description": "The PayPal-generated ID for the payment_source stored within the Vault.",
            "$ref": "#/components/schemas/vault_id"
          },
          "email_address": {
            "description": "The email address of the PayPal account holder.",
            "$ref": "#/components/schemas/email"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "phone": {
            "description": "The phone number of the customer. Available only when you enable the **Contact Telephone Number** option in the <a href=\"https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments\">**Profile & Settings**</a> for the merchant's PayPal account. The `phone.phone_number` supports only `national_number`.",
            "$ref": "#/components/schemas/phone_with_type"
          },
          "birth_date": {
            "description": "The birth date of the PayPal account holder in `YYYY-MM-DD` format.",
            "$ref": "#/components/schemas/date_no_time"
          },
          "tax_info": {
            "description": "The tax information of the PayPal account holder. Required only for Brazilian PayPal account holder's. Both `tax_id` and `tax_id_type` are required.",
            "$ref": "#/components/schemas/tax_info"
          },
          "address": {
            "$ref": "#/components/schemas/definitions-address"
          },
          "attributes": {
            "description": "Additional attributes associated with the use of this wallet.",
            "$ref": "#/components/schemas/paypal_wallet_attributes"
          },
          "experience_context": {
            "$ref": "#/components/schemas/paypal_wallet_experience_context"
          },
          "billing_agreement_id": {
            "$ref": "#/components/schemas/billing_agreement_id"
          }
        }
      },
      "paypal_wallet_attributes": {
        "type": "object",
        "title": "PayPal Wallet Attributes",
        "description": "Additional attributes associated with the use of this PayPal Wallet.",
        "properties": {
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "properties": {
                  "merchant_customer_id": {
                    "description": "Merchants and partners may already have a data-store where their customer information is persisted. Use merchant_customer_id to associate the PayPal-generated customer.id to your representation of a customer.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "pattern": "^[0-9a-zA-Z-_.^*$@#]+$"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/2"
              }
            ]
          },
          "vault": {
            "allOf": [
              {
                "$ref": "#/components/schemas/vault_instruction_base"
              },
              {
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "The description displayed to PayPal consumer on the approval flow for PayPal, as well as on the PayPal payment token management experience on PayPal.com.",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "usage_pattern": {
                    "title": "PayPal Payment Token Usage Pattern",
                    "type": "string",
                    "description": "Expected business/pricing model for the billing agreement.",
                    "minLength": 1,
                    "maxLength": 30,
                    "x-enumDescriptions": [
                      {
                        "value": "IMMEDIATE",
                        "description": "On-demand instant payments – non-recurring, pre-paid, variable amount, variable frequency."
                      },
                      {
                        "value": "DEFERRED",
                        "description": "Pay after use, non-recurring post-paid, variable amount, irregular frequency."
                      },
                      {
                        "value": "RECURRING_PREPAID",
                        "description": "Pay upfront fixed or variable amount on a fixed date before the goods/service is delivered."
                      },
                      {
                        "value": "RECURRING_POSTPAID",
                        "description": "Pay on a fixed date based on usage or consumption after the goods/service is delivered."
                      },
                      {
                        "value": "THRESHOLD_PREPAID",
                        "description": "Charge payer when the set amount is reached or monthly billing cycle, whichever comes first, before the goods/service is delivered."
                      },
                      {
                        "value": "THRESHOLD_POSTPAID",
                        "description": "Charge payer when the set amount is reached or monthly billing cycle, whichever comes first, after the goods/service is delivered."
                      }
                    ],
                    "enum": [
                      "IMMEDIATE",
                      "DEFERRED",
                      "RECURRING_PREPAID",
                      "RECURRING_POSTPAID",
                      "THRESHOLD_PREPAID",
                      "THRESHOLD_POSTPAID"
                    ]
                  },
                  "usage_type": {
                    "title": "PayPal Payment Token Usage Type",
                    "type": "string",
                    "description": "The usage type associated with the PayPal payment token.",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[0-9A-Z_]+$",
                    "x-enumDescriptions": [
                      {
                        "value": "MERCHANT",
                        "description": "The PayPal Payment Token will be used for future transaction directly with a merchant."
                      },
                      {
                        "value": "PLATFORM",
                        "description": "The PayPal Payment Token will be used for future transaction on a platform. A platform is typically a marketplace or a channel that a payer can purchase goods and services from multiple merchants."
                      }
                    ],
                    "enum": ["MERCHANT", "PLATFORM"]
                  },
                  "customer_type": {
                    "title": "PayPal Payment Token Customer Type",
                    "type": "string",
                    "description": "The customer type associated with the PayPal payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[0-9A-Z_]+$",
                    "default": "CONSUMER",
                    "x-enumDescriptions": [
                      {
                        "value": "CONSUMER",
                        "description": "The customer vaulting the PayPal payment token is a consumer on the merchant / platform."
                      },
                      {
                        "value": "BUSINESS",
                        "description": "The customer vaulting the PayPal payment token is a business on merchant / platform."
                      }
                    ],
                    "enum": ["CONSUMER", "BUSINESS"]
                  },
                  "permit_multiple_payment_tokens": {
                    "type": "boolean",
                    "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
                    "default": false
                  }
                }
              },
              {
                "$ref": "#/components/schemas/paypal_wallet_attributes_2"
              },
              {
                "description": "Attributes used to provide the instructions during vaulting of the PayPal Wallet."
              }
            ]
          }
        }
      },
      "paypal_wallet_attributes_2": {
        "type": "object",
        "title": "Vaulted PayPal Wallet Common Attributes",
        "description": "Resource consolidating common request and response attributes for vaulting PayPal Wallet.",
        "required": ["usage_type"]
      },
      "paypal_wallet_experience_context": {
        "type": "object",
        "title": "PayPal Wallet Experience Context",
        "description": "Customizes the payer experience during the approval process for payment with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$"
          },
          "locale": {
            "description": "The BCP 47-formatted locale of pages that the PayPal payment experience shows. PayPal supports a five-character code. For example, `da-DK`, `he-IL`, `id-ID`, `ja-JP`, `no-NO`, `pt-BR`, `ru-RU`, `sv-SE`, `th-TH`, `zh-CN`, `zh-HK`, or `zh-TW`.",
            "$ref": "#/components/schemas/language"
          },
          "shipping_preference": {
            "type": "string",
            "description": "The location from which the shipping address is derived.",
            "minLength": 1,
            "maxLength": 24,
            "pattern": "^[A-Z_]+$",
            "default": "GET_FROM_FILE",
            "x-enumDescriptions": [
              {
                "value": "GET_FROM_FILE",
                "description": "Get the customer-provided shipping address on the PayPal site."
              },
              {
                "value": "NO_SHIPPING",
                "description": "Removes the shipping address information from the API response and the Paypal site. However, the shipping.phone_number and shipping.email_address fields will still be returned to allow for digital goods delivery."
              },
              {
                "value": "SET_PROVIDED_ADDRESS",
                "description": "Get the merchant-provided address. The customer cannot change this address on the PayPal site. If merchant does not pass an address, customer can choose the address on PayPal pages."
              }
            ],
            "enum": ["GET_FROM_FILE", "NO_SHIPPING", "SET_PROVIDED_ADDRESS"]
          },
          "return_url": {
            "description": "The URL where the customer will be redirected upon approving a payment.",
            "format": "uri",
            "$ref": "#/components/schemas/url"
          },
          "cancel_url": {
            "description": "The URL where the customer will be redirected upon cancelling the payment approval.",
            "format": "uri",
            "$ref": "#/components/schemas/url"
          },
          "landing_page": {
            "type": "string",
            "description": "The type of landing page to show on the PayPal site for customer checkout.",
            "default": "NO_PREFERENCE",
            "x-enumDescriptions": [
              {
                "value": "LOGIN",
                "description": "When the customer clicks <strong>PayPal Checkout</strong>, the customer is redirected to a page to log in to PayPal and approve the payment."
              },
              {
                "value": "GUEST_CHECKOUT",
                "description": "When the customer clicks <strong>PayPal Checkout</strong>, the customer is redirected to a page to enter credit or debit card and other relevant billing information required to complete the purchase. This option has previously been also called as 'BILLING'"
              },
              {
                "value": "NO_PREFERENCE",
                "description": "When the customer clicks <strong>PayPal Checkout</strong>, the customer is redirected to either a page to log in to PayPal and approve the payment or to a page to enter credit or debit card and other relevant billing information required to complete the purchase, depending on their previous interaction with PayPal."
              }
            ],
            "minLength": 1,
            "maxLength": 13,
            "pattern": "^[0-9A-Z_]+$",
            "enum": ["LOGIN", "GUEST_CHECKOUT", "NO_PREFERENCE"]
          },
          "user_action": {
            "type": "string",
            "description": "Configures a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow.",
            "default": "CONTINUE",
            "x-enumDescriptions": [
              {
                "value": "CONTINUE",
                "description": "After you redirect the customer to the PayPal payment page, a <strong>Continue</strong> button appears. Use this option when the final amount is not known when the checkout flow is initiated and you want to redirect the customer to the merchant page without processing the payment.",
                "default": true
              },
              {
                "value": "PAY_NOW",
                "description": "After you redirect the customer to the PayPal payment page, a <strong>Pay Now</strong> button appears. Use this option when the final amount is known when the checkout is initiated and you want to process the payment immediately when the customer clicks <strong>Pay Now</strong>."
              }
            ],
            "minLength": 1,
            "maxLength": 8,
            "pattern": "^[0-9A-Z_]+$",
            "enum": ["CONTINUE", "PAY_NOW"]
          },
          "payment_method_preference": {
            "type": "string",
            "description": "The merchant-preferred payment methods.",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[0-9A-Z_]+$",
            "default": "UNRESTRICTED",
            "x-enumDescriptions": [
              {
                "value": "UNRESTRICTED",
                "description": "Accepts any type of payment from the customer.",
                "default": true
              },
              {
                "value": "IMMEDIATE_PAYMENT_REQUIRED",
                "description": "Accepts only immediate payment from the customer. For example, credit card, PayPal balance, or instant ACH. Ensures that at the time of capture, the payment does not have the `pending` status."
              }
            ],
            "enum": ["UNRESTRICTED", "IMMEDIATE_PAYMENT_REQUIRED"]
          }
        }
      },
      "phone_number": {
        "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
        "type": "object",
        "title": "Phone",
        "properties": {
          "national_number": {
            "type": "string",
            "description": "The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "^[0-9]{1,14}?$"
          }
        },
        "required": ["national_number"]
      },
      "phone_type": {
        "type": "string",
        "title": "Phone Type",
        "description": "The phone type.",
        "enum": ["FAX", "HOME", "MOBILE", "OTHER", "PAGER"]
      },
      "phone_with_type": {
        "type": "object",
        "title": "Phone With Type",
        "description": "The phone information.",
        "properties": {
          "phone_type": {
            "$ref": "#/components/schemas/phone_type"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          }
        },
        "required": ["phone_number"]
      },
      "preferred_payment_source": {
        "type": "object",
        "description": "The payment source definition.",
        "title": "Payment Source",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/token"
          },
          "paypal": {
            "description": "Indicates that PayPal Wallet is the payment source. Main use of this selection is to provide additional instructions associated with this choice like vaulting.",
            "$ref": "#/components/schemas/paypal_wallet"
          },
          "bancontact": {
            "description": "Bancontact is the most popular online payment in Belgium. [More Details](https://www.bancontact.com/).",
            "$ref": "#/components/schemas/bancontact_request"
          },
          "blik": {
            "description": "BLIK is a mobile payment system, created by Polish Payment Standard in order to allow millions of users to pay in shops, payout cash in ATMs and make online purchases and payments. [More Details](https://blikmobile.pl/).",
            "$ref": "#/components/schemas/blik_request"
          },
          "eps": {
            "description": "The eps transfer is an online payment method developed by many Austrian banks. [More Details](https://www.eps-ueberweisung.at/).",
            "$ref": "#/components/schemas/eps_request"
          },
          "giropay": {
            "description": "Giropay is an Internet payment System in Germany, based on online banking. [More Details](https://giropay.de/).",
            "$ref": "#/components/schemas/giropay_request"
          },
          "ideal": {
            "description": "The Dutch payment method iDEAL is an online payment method that enables consumers to pay online through their own bank. [More Details](https://www.ideal.nl/).",
            "$ref": "#/components/schemas/ideal_request"
          },
          "mybank": {
            "description": "MyBank is an e-authorisation solution which enables safe digital payments and identity authentication through a consumer’s own online banking portal or mobile application. [More Details](https://www.mybank.eu/).",
            "$ref": "#/components/schemas/mybank_request"
          },
          "p24": {
            "description": "P24 (Przelewy24) is a secure and fast online bank transfer service linked to all the major banks in Poland. [More Details](https://www.przelewy24.pl/).",
            "$ref": "#/components/schemas/p24_request"
          },
          "sofort": {
            "description": "SOFORT Banking is a real-time bank transfer payment method that buyers use to transfer funds directly to merchants from their bank accounts. [More Details](https://www.klarna.com/sofort/).",
            "$ref": "#/components/schemas/sofort_request"
          },
          "trustly": {
            "description": "Trustly is a payment method that allows customers to shop and pay from their bank account. [More Details](https://www.trustly.net/).",
            "$ref": "#/components/schemas/trustly_request"
          },
          "apple_pay": {
            "description": "ApplePay payment source, allows buyer to pay using ApplePay, both on Web as well as on Native.",
            "$ref": "#/components/schemas/apple_pay_request"
          },
          "google_pay": {
            "description": "Google Pay payment source, allows buyer to pay using Google Pay.",
            "$ref": "#/components/schemas/google_pay_request"
          },
          "venmo": {
            "description": "Information needed to indicate that Venmo is being used to fund the payment.",
            "$ref": "#/components/schemas/venmo_wallet_request"
          }
        }
      },
      "processor_response": {
        "type": "object",
        "title": "Processor Response",
        "description": "The processor-provided response codes that describe the submitted payment. Supported only when the `payment_method` is `credit_card`.",
        "properties": {
          "response_code": {
            "type": "string",
            "description": "The PayPal normalized response code, which is generated from the processor's specific response code.",
            "maxLength": 4,
            "readOnly": true
          },
          "avs_code": {
            "type": "string",
            "description": "The [Address Verification System (AVS)](/docs/nvp-soap-api/AVSResponseCodes/) response code.",
            "maxLength": 1,
            "pattern": "[A-z0-9]{1}",
            "readOnly": true
          },
          "cvv_code": {
            "type": "string",
            "description": "The [CVV](/docs/nvp-soap-api/AVSResponseCodes/) system response code.",
            "maxLength": 1,
            "pattern": "[A-z0-9]{1}",
            "readOnly": true
          },
          "advice_code": {
            "type": "string",
            "description": "The merchant advice on how to handle declines for recurring payments.",
            "readOnly": true,
            "x-enumDescriptions": [
              {
                "value": "01_NEW_ACCOUNT_INFORMATION",
                "description": "01 New account information."
              },
              {
                "value": "02_TRY_AGAIN_LATER",
                "description": "02 Try again later."
              },
              {
                "value": "02_STOP_SPECIFIC_PAYMENT",
                "description": "02 Stop specific payment."
              },
              {
                "value": "03_DO_NOT_TRY_AGAIN",
                "description": "03 Do not try again."
              },
              {
                "value": "03_REVOKE_AUTHORIZATION_FOR_FUTURE_PAYMENT",
                "description": "03 Revoke authorization for future payment."
              },
              {
                "value": "21_DO_NOT_TRY_AGAIN_CARD_HOLDER_CANCELLED_RECURRRING_CHARGE",
                "description": "21 Do not try again. Card holder cancelled recurring charge."
              },
              {
                "value": "21_CANCEL_ALL_RECURRING_PAYMENTS",
                "description": "21 Cancel all recurring payments."
              }
            ],
            "enum": [
              "01_NEW_ACCOUNT_INFORMATION",
              "02_TRY_AGAIN_LATER",
              "02_STOP_SPECIFIC_PAYMENT",
              "03_DO_NOT_TRY_AGAIN",
              "03_REVOKE_AUTHORIZATION_FOR_FUTURE_PAYMENT",
              "21_DO_NOT_TRY_AGAIN_CARD_HOLDER_CANCELLED_RECURRRING_CHARGE",
              "21_CANCEL_ALL_RECURRING_PAYMENTS"
            ]
          },
          "eci_submitted": {
            "type": "string",
            "description": "The processor-provided authorization response.",
            "readOnly": true
          },
          "vpas": {
            "type": "string",
            "description": "The processor-provided Visa Payer Authentication Service (VPAS) status.",
            "readOnly": true
          }
        },
        "required": ["response_code"]
      },
      "redirect_urls": {
        "type": "object",
        "description": "A set of redirect URLs that you provide for PayPal-based payments.",
        "title": "Redirect URLs",
        "additionalProperties": false,
        "properties": {
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the payer is redirected after he or she approves the payment. **Required for PayPal account payments**."
          },
          "cancel_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where the payer is redirected after he or she cancels the payment. **Required for PayPal account payments**."
          }
        }
      },
      "refund": {
        "type": "object",
        "title": "Refund",
        "description": "The refund details.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the refund transaction. Maximum length is 17 characters."
          },
          "amount": {
            "$ref": "#/components/schemas/amount",
            "description": "The refund amount. Includes both the amount refunded to the payer and amount of the fee refunded to the payee."
          },
          "state": {
            "type": "string",
            "x-enumDescriptions": [
              {
                "value": "pending",
                "description": "The refund state is pending."
              },
              {
                "value": "completed",
                "description": "The refund state is completed."
              },
              {
                "value": "cancelled",
                "description": "The refund state is cancelled."
              },
              {
                "value": "failed",
                "description": "The refund state is failed."
              }
            ],
            "description": "The state of the refund.",
            "readOnly": true,
            "enum": ["pending", "completed", "cancelled", "failed"]
          },
          "reason": {
            "type": "string",
            "description": "The reason that the transaction is being refunded."
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice or tracking ID number.",
            "maxLength": 127
          },
          "sale_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction being refunded."
          },
          "capture_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction being refunded."
          },
          "parent_payment": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the payment on which this transaction is based."
          },
          "description": {
            "type": "string",
            "description": "The refund description. Value must be single-byte alphanumeric characters."
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the refund was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        }
      },
      "refund-2": {
        "type": "object",
        "title": "Refund",
        "description": "The refund transaction details.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the refund transaction.",
            "maxLength": 17
          },
          "amount": {
            "description": "The refund amount. Includes both the amount refunded to the payer and the fee refunded to the payee.",
            "$ref": "#/components/schemas/amount"
          },
          "state": {
            "type": "string",
            "enum": ["pending", "completed", "cancelled", "failed"],
            "description": "The state of the refund.",
            "readOnly": true
          },
          "reason": {
            "type": "string",
            "description": "The reason that the transaction is being refunded."
          },
          "invoice_number": {
            "type": "string",
            "description": "Your own invoice or tracking ID number. Value is a string of single-byte alphanumeric characters.",
            "maxLength": 127
          },
          "sale_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction being refunded."
          },
          "capture_id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction being refunded."
          },
          "parent_payment": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the payment on which this transaction is based."
          },
          "description": {
            "type": "string",
            "description": "The refund description."
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the refund was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        }
      },
      "refund_request": {
        "type": "object",
        "title": "Refund Request",
        "description": "The refund request.",
        "properties": {
          "amount": {
            "description": "The refund amount. Includes both the amount to refund to the payer and the fee amount to refund to the payee.",
            "$ref": "#/components/schemas/amount"
          },
          "description": {
            "type": "string",
            "description": "The refund description. Value is a string of single-byte alphanumeric characters.",
            "maxLength": 255
          },
          "reason": {
            "type": "string",
            "description": "The refund reason description.",
            "maxLength": 30
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number that tracks this payment. Value is a string of single-byte alphanumeric characters.",
            "maxLength": 127
          }
        }
      },
      "related_resources": {
        "type": "object",
        "title": "Related Resources",
        "description": "The payment-related financial transactions, which include sales, authorizations, captures, and refunds. To show resource details, use the resource ID. For example, to [show details for a related authorization](/docs/api/payments/v1/#authorization_get), use the ID returned in the `authorization` object. You can also use the [HATEOAS links](/docs/api/hateoas-links/) for a resource to complete operations for that resource. For example, a `sale` object provides a `refund` link that enables you to refund the sale.",
        "properties": {
          "sale": {
            "$ref": "#/components/schemas/sale"
          },
          "authorization": {
            "$ref": "#/components/schemas/authorization"
          },
          "order": {
            "$ref": "#/components/schemas/order"
          },
          "capture": {
            "$ref": "#/components/schemas/capture"
          },
          "refund": {
            "$ref": "#/components/schemas/refund"
          }
        }
      },
      "related_resources_list": {
        "type": "array",
        "description": "An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment.",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/related_resources"
        }
      },
      "sale": {
        "type": "object",
        "title": "Sale",
        "description": "The sale transaction details.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the sale transaction."
          },
          "amount": {
            "description": "The amount to collect.",
            "$ref": "#/components/schemas/amount"
          },
          "payment_mode": {
            "type": "string",
            "description": "The transaction payment mode. Supported only for PayPal payments.",
            "readOnly": true,
            "enum": [
              "INSTANT_TRANSFER",
              "MANUAL_BANK_TRANSFER",
              "DELAYED_TRANSFER",
              "ECHECK"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "completed",
              "partially_refunded",
              "pending",
              "refunded",
              "denied"
            ],
            "description": "The state of the sale transaction.",
            "readOnly": true
          },
          "reason_code": {
            "type": "string",
            "enum": [
              "CHARGEBACK",
              "GUARANTEE",
              "BUYER_COMPLAINT",
              "REFUND",
              "UNCONFIRMED_SHIPPING_ADDRESS",
              "ECHECK",
              "INTERNATIONAL_WITHDRAWAL",
              "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
              "PAYMENT_REVIEW",
              "REGULATORY_REVIEW",
              "UNILATERAL",
              "VERIFICATION_REQUIRED",
              "TRANSACTION_APPROVED_AWAITING_FUNDING"
            ],
            "description": "A reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.",
            "readOnly": true
          },
          "protection_eligibility": {
            "type": "string",
            "enum": ["ELIGIBLE", "PARTIALLY_ELIGIBLE", "INELIGIBLE"],
            "description": "The merchant protection level in effect for the transaction. Supported only for PayPal payments.",
            "readOnly": true
          },
          "protection_eligibility_type": {
            "type": "string",
            "enum": [
              "ITEM_NOT_RECEIVED_ELIGIBLE",
              "UNAUTHORIZED_PAYMENT_ELIGIBLE",
              "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE"
            ],
            "description": "The merchant protection type in effect for the transaction. Returned only when `protection_eligibility` is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported only for PayPal payments.",
            "readOnly": true
          },
          "clearing_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the PayPal eCheck transaction is expected to clear, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "payment_hold_status": {
            "type": "string",
            "enum": ["HELD"],
            "description": "The recipient fund status. Returned only when the fund status is `held`.",
            "readOnly": true
          },
          "payment_hold_reasons": {
            "$ref": "#/components/schemas/payment_hold_reason_list"
          },
          "transaction_fee": {
            "description": "The currency and amount of the transaction fee for this payment. Would not be returned for `pending` transactions where the funds have not been realized in the payee account.",
            "readOnly": true,
            "$ref": "#/components/schemas/currency"
          },
          "receivable_amount": {
            "description": "The currency and amount of the net that the merchant receives for this transaction in their receivable currency. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer.",
            "$ref": "#/components/schemas/currency"
          },
          "transaction_fee_in_receivable_currency": {
            "description": "The currency and amount of the PayPal fee for this payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example `CNY`. Would not be returned for `pending` transactions where the funds have not been realized in the payee account.",
            "readOnly": true,
            "$ref": "#/components/schemas/currency"
          },
          "exchange_rate": {
            "type": "string",
            "description": "The exchange rate for this transaction. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer.",
            "readOnly": true
          },
          "fmf_details": {
            "$ref": "#/components/schemas/fmf_details"
          },
          "receipt_id": {
            "type": "string",
            "description": "The receipt ID, which is a payment ID number that is returned for guest users to identify the payment.",
            "pattern": "^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$",
            "readOnly": true
          },
          "parent_payment": {
            "type": "string",
            "description": "The ID of the payment on which this transaction is based.",
            "readOnly": true
          },
          "processor_response": {
            "$ref": "#/components/schemas/processor_response"
          },
          "billing_agreement_id": {
            "type": "string",
            "description": "The ID of the billing agreement. Used as reference to execute this transaction.",
            "readOnly": true
          },
          "create_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the sale, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "readOnly": true
          },
          "links": {
            "$ref": "#/components/schemas/link_description_list"
          }
        },
        "required": ["id", "amount", "state", "parent_payment", "create_time"]
      },
      "shipping_address": {
        "title": "Shipping Address",
        "description": "The shipping address details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/address"
          },
          {
            "properties": {
              "recipient_name": {
                "type": "string",
                "description": "The name of the recipient at this address.",
                "maxLength": 127
              }
            }
          }
        ]
      },
      "sofort_request": {
        "type": "object",
        "title": "Sofort payment request",
        "description": "Information needed to pay using Sofort.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "store_in_vault_instruction": {
        "type": "string",
        "description": "Defines how and when the payment source gets vaulted.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "x-enumDescriptions": [
          {
            "value": "ON_SUCCESS",
            "description": "Defines that the payment_source will be vaulted only when at least one authorization or capture using that payment_source is successful."
          }
        ],
        "enum": ["ON_SUCCESS"]
      },
      "stored_payment_source_payment_type": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Indicates the type of the stored payment_source payment.",
        "x-enumDescriptions": [
          {
            "value": "ONE_TIME",
            "description": "One Time payment such as online purchase or donation. (e.g. Checkout with one-click)."
          },
          {
            "value": "RECURRING",
            "description": "Payment which is part of a series of payments with fixed or variable amounts, following a fixed time interval. (e.g. Subscription payments)."
          },
          {
            "value": "UNSCHEDULED",
            "description": "Payment which is part of a series of payments that occur on a non-fixed schedule and/or have variable amounts. (e.g. Account Topup payments)."
          }
        ],
        "enum": ["ONE_TIME", "RECURRING", "UNSCHEDULED"]
      },
      "stored_payment_source_usage_type": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "DERIVED",
        "description": "Indicates if this is a `first` or `subsequent` payment using a stored payment source (also referred to as stored credential or card on file).",
        "x-enumDescriptions": [
          {
            "value": "FIRST",
            "description": "Indicates the Initial/First payment with a payment_source that is intended to be stored upon successful processing of the payment."
          },
          {
            "value": "SUBSEQUENT",
            "description": "Indicates a payment using a stored payment_source which has been successfully used previously for a payment."
          },
          {
            "value": "DERIVED",
            "description": "Indicates that PayPal will derive the value of `FIRST` or `SUBSEQUENT` based on data available to PayPal."
          }
        ],
        "enum": ["FIRST", "SUBSEQUENT", "DERIVED"]
      },
      "tax_info": {
        "type": "object",
        "description": "The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.",
        "title": "Tax Info",
        "properties": {
          "tax_id": {
            "type": "string",
            "description": "The customer's tax ID value.",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "([a-zA-Z0-9])"
          },
          "tax_id_type": {
            "type": "string",
            "description": "The customer's tax ID type.",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "^[A-Z0-9_]+$",
            "x-enumDescriptions": [
              {
                "value": "BR_CPF",
                "description": "The individual tax ID type, typically is 11 characters long."
              },
              {
                "value": "BR_CNPJ",
                "description": "The business tax ID type, typically is 14 characters long."
              }
            ],
            "enum": ["BR_CPF", "BR_CNPJ"]
          }
        },
        "required": ["tax_id", "tax_id_type"]
      },
      "token": {
        "type": "object",
        "title": "Token",
        "description": "The tokenized payment source to fund a payment.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The PayPal-generated ID for the token.",
            "pattern": "^[0-9a-zA-Z_-]+$",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "description": "The tokenization method that generated the ID.",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[0-9A-Z_-]+$",
            "x-enumDescriptions": [
              {
                "value": "BILLING_AGREEMENT",
                "description": "The PayPal billing agreement ID. References an approved recurring payment for goods or services."
              }
            ],
            "enum": ["BILLING_AGREEMENT"]
          }
        },
        "required": ["id", "type"]
      },
      "tokenized_card": {
        "description": "The payment card to use to fund a payment. Can be a credit or debit card.",
        "type": "object",
        "title": "Card",
        "properties": {
          "name": {
            "type": "string",
            "description": "The card holder's name as it appears on the card.",
            "maxLength": 300,
            "minLength": 1,
            "pattern": "^.{1,300}$"
          },
          "number": {
            "type": "string",
            "description": "The primary account number (PAN) for the payment card.",
            "pattern": "^[0-9]{13,19}$",
            "minLength": 13,
            "maxLength": 19
          },
          "expiry": {
            "description": "The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6).",
            "$ref": "#/components/schemas/date_year_month"
          },
          "card_type": {
            "description": "The card brand or network. Typically used in the response.",
            "readOnly": true,
            "$ref": "#/components/schemas/card_brand",
            "deprecated": true
          },
          "type": {
            "description": "The payment card type.",
            "$ref": "#/components/schemas/card_type"
          },
          "brand": {
            "description": "The card brand or network. Typically used in the response.",
            "$ref": "#/components/schemas/card_brand"
          },
          "billing_address": {
            "$ref": "#/components/schemas/tokenized_card_billing_address"
          }
        }
      },
      "tokenized_card_billing_address": {
        "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
        "type": "object",
        "title": "Portable Postal Address (Medium-Grained)",
        "properties": {
          "address_line_1": {
            "type": "string",
            "description": "The first line of the address, such as number and street, for example, `173 Drury Lane`. Needed for data entry, and Compliance and Risk checks. This field needs to pass the full address.",
            "maxLength": 300
          },
          "address_line_2": {
            "type": "string",
            "description": "The second line of the address, for example, a suite or apartment number.",
            "maxLength": 300
          },
          "admin_area_2": {
            "type": "string",
            "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
            "maxLength": 120
          },
          "admin_area_1": {
            "type": "string",
            "description": "The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. This data is formatted for postal delivery, for example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A *kanton*.</li></ul>",
            "maxLength": 300
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
            "maxLength": 60
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code-2"
          }
        },
        "required": ["country_code"]
      },
      "transaction": {
        "type": "object",
        "title": "Transaction",
        "description": "An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment.",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount",
            "description": "The amount to collect."
          },
          "payee": {
            "$ref": "#/components/schemas/payee"
          },
          "description": {
            "type": "string",
            "description": "The purchase description.",
            "maxLength": 127
          },
          "note_to_payee": {
            "type": "string",
            "description": "The note to the recipient of the funds in this transaction.",
            "maxLength": 255
          },
          "custom": {
            "type": "string",
            "description": "The free-form field for the client's use.",
            "maxLength": 255
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number to track this payment.",
            "maxLength": 127
          },
          "soft_descriptor": {
            "type": "string",
            "description": "The soft descriptor to use to charge this funding source. If greater than the maximum allowed length, the API truncates the string.",
            "maxLength": 22
          },
          "payment_options": {
            "$ref": "#/components/schemas/payment_options"
          },
          "item_list": {
            "$ref": "#/components/schemas/item_list"
          },
          "notify_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to send payment notifications.",
            "maxLength": 2048
          },
          "related_resources": {
            "$ref": "#/components/schemas/related_resources_list"
          }
        }
      },
      "transaction_list": {
        "type": "array",
        "description": "An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment. For update and execute payment calls, the **`transactions`** object accepts the **`amount`** object only.",
        "items": {
          "$ref": "#/components/schemas/transaction"
        }
      },
      "trustly_request": {
        "type": "object",
        "title": "Trustly payment request",
        "description": "Information needed to pay using Trustly.",
        "properties": {
          "name": {
            "description": "The name of the account holder associated with this payment method.",
            "$ref": "#/components/schemas/full_name"
          },
          "country_code": {
            "description": "The two-character ISO 3166-1 country code.",
            "$ref": "#/components/schemas/country_code-3"
          },
          "experience_context": {
            "description": "Customizes the payer experience during the approval process for the payment.",
            "$ref": "#/components/schemas/experience_context_base"
          }
        },
        "required": ["name", "country_code"]
      },
      "url": {
        "type": "string",
        "description": "Describes the URL.",
        "format": "uri"
      },
      "v3_vault_instruction_base": {
        "type": "object",
        "title": "Base Vault Instruction Parameters",
        "description": "Base vaulting specification. The object can be extended for specific use cases within each payment_source that supports vaulting.",
        "properties": {
          "store_in_vault": {
            "$ref": "#/components/schemas/store_in_vault_instruction"
          }
        },
        "required": ["store_in_vault"]
      },
      "vault_id": {
        "type": "string",
        "description": "The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9a-zA-Z_-]+$"
      },
      "vault_instruction_base": {
        "type": "object",
        "title": "Vault Instruction Base",
        "description": "Basic vault instruction specification that can be extended by specific payment sources that supports vaulting.",
        "properties": {
          "store_in_vault": {
            "$ref": "#/components/schemas/store_in_vault_instruction"
          }
        }
      },
      "vault_venmo_wallet_base": {
        "type": "object",
        "title": "Vaulted Venmo Wallet Common Attributes",
        "description": "Resource consolidating common request and response attirbutes for vaulting Venmo Wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/v3_vault_instruction_base"
          },
          {
            "properties": {
              "description": {
                "type": "string",
                "description": "The description displayed to Venmo consumer on the approval flow for Venmo, as well as on the Venmo payment token management experience on Venmo.com.",
                "minLength": 1,
                "maxLength": 128,
                "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$"
              },
              "usage_pattern": {
                "title": "Venmo Payment Token Usage Pattern",
                "type": "string",
                "description": "Expected business/pricing model for the billing agreement.",
                "minLength": 1,
                "maxLength": 30,
                "pattern": "^[0-9A-Z_]+$",
                "x-enumDescriptions": [
                  {
                    "value": "IMMEDIATE",
                    "description": "On-demand instant payments – non-recurring, pre-paid, variable amount, variable frequency."
                  },
                  {
                    "value": "DEFERRED",
                    "description": "Pay after use, non-recurring post-paid, variable amount, irregular frequency."
                  },
                  {
                    "value": "RECURRING_PREPAID",
                    "description": "Pay upfront fixed or variable amount on a fixed date before the goods/service is delivered."
                  },
                  {
                    "value": "RECURRING_POSTPAID",
                    "description": "Pay on a fixed date based on usage or consumption after the goods/service is delivered."
                  },
                  {
                    "value": "THRESHOLD_PREPAID",
                    "description": "Charge payer when the set amount is reached or monthly billing cycle, whichever comes first, before the goods/service is delivered."
                  },
                  {
                    "value": "THRESHOLD_POSTPAID",
                    "description": "Charge payer when the set amount is reached or monthly billing cycle, whichever comes first, after the goods/service is delivered."
                  }
                ],
                "enum": [
                  "IMMEDIATE",
                  "DEFERRED",
                  "RECURRING_PREPAID",
                  "RECURRING_POSTPAID",
                  "THRESHOLD_PREPAID",
                  "THRESHOLD_POSTPAID"
                ]
              },
              "usage_type": {
                "title": "Venmo Payment Token Usage Type",
                "type": "string",
                "description": "The usage type associated with the Venmo payment token.",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[0-9A-Z_]+$",
                "x-enumDescriptions": [
                  {
                    "value": "MERCHANT",
                    "description": "The Venmo Payment Token will be used for future transaction directly with a merchant."
                  },
                  {
                    "value": "PLATFORM",
                    "description": "The Venmo Payment Token will be used for future transaction on a platform. A platform is typically a marketplace or a channel that a payer can purchase goods and services from multiple merchants."
                  }
                ],
                "enum": ["MERCHANT", "PLATFORM"]
              },
              "customer_type": {
                "title": "Venmo Payment Token Customer Type",
                "type": "string",
                "description": "The customer type associated with the Venmo payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[0-9A-Z_]+$",
                "default": "CONSUMER",
                "x-enumDescriptions": [
                  {
                    "value": "CONSUMER",
                    "description": "The customer vaulting the Venmo payment token is a consumer on the merchant / platform."
                  },
                  {
                    "value": "BUSINESS",
                    "description": "The customer vaulting the Venmo payment token is a business on merchant / platform."
                  }
                ],
                "enum": ["CONSUMER", "BUSINESS"]
              },
              "permit_multiple_payment_tokens": {
                "type": "boolean",
                "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same Venmo account.",
                "default": false
              }
            }
          }
        ],
        "required": ["usage_type"]
      },
      "venmo_wallet_attributes": {
        "type": "object",
        "title": "Venmo Wallet Attributes",
        "description": "Additional attributes associated with the use of this Venmo Wallet.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/definitions-customer"
          },
          "vault": {
            "description": "Attributes used to provide the instructions during vaulting of the Venmo Wallet.",
            "$ref": "#/components/schemas/vault_venmo_wallet_base"
          }
        }
      },
      "venmo_wallet_experience_context": {
        "type": "object",
        "title": "Venmo Wallet Experience Context",
        "description": "Customizes the buyer experience during the approval process for payment with Venmo.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The business name of the merchant. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$"
          },
          "shipping_preference": {
            "type": "string",
            "description": "The location from which the shipping address is derived.",
            "minLength": 1,
            "maxLength": 24,
            "pattern": "^[A-Z_]+$",
            "default": "GET_FROM_FILE",
            "x-enumDescriptions": [
              {
                "value": "GET_FROM_FILE",
                "description": "Get the customer-provided shipping address on the PayPal site."
              },
              {
                "value": "NO_SHIPPING",
                "description": "Redacts the shipping address from the PayPal site. Recommended for digital goods."
              },
              {
                "value": "SET_PROVIDED_ADDRESS",
                "description": "Get the merchant-provided address. The customer cannot change this address on the PayPal site. If merchant does not pass an address, customer can choose the address on PayPal pages."
              }
            ],
            "enum": ["GET_FROM_FILE", "NO_SHIPPING", "SET_PROVIDED_ADDRESS"]
          }
        }
      },
      "venmo_wallet_request": {
        "type": "object",
        "title": "Venmo Wallet Request",
        "description": "Information needed to pay using Venmo.",
        "properties": {
          "vault_id": {
            "description": "The PayPal-generated ID for the saved Venmo wallet payment_source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
            "$ref": "#/components/schemas/vault_id"
          },
          "email_address": {
            "description": "The email address of the payer.",
            "$ref": "#/components/schemas/email"
          },
          "experience_context": {
            "$ref": "#/components/schemas/venmo_wallet_experience_context"
          },
          "attributes": {
            "description": "Additional attributes associated with the use of this wallet.",
            "$ref": "#/components/schemas/venmo_wallet_attributes"
          }
        }
      }
    },
    "parameters": {
      "paypal_partner_attribution_id": {
        "name": "PayPal-Partner-Attribution-Id",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "maxLength": 32
        }
      },
      "count": {
        "name": "count",
        "in": "query",
        "description": "The number of items to list in the response.",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 20,
          "default": 10
        }
      },
      "start_id": {
        "name": "start_id",
        "in": "query",
        "description": "The ID of the starting resource in the response. When results are paged, you can use the `next_id` value as the `start_id` to continue with the next set of results.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "start_index": {
        "name": "start_index",
        "in": "query",
        "description": "The start index of the payments to list. Typically, you use the `start_index` to jump to a specific position in the resource history based on its cart. For example, to start at the second item in a list of results, specify `?start_index=2`.",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "start_time": {
        "name": "start_time",
        "in": "query",
        "description": "The start date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `start_time=2016-03-06T11:00:00Z`.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "end_time": {
        "name": "end_time",
        "in": "query",
        "description": "The end date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `end_time=2016-03-06T11:00:00Z`.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "payee_id": {
        "name": "payee_id",
        "in": "query",
        "description": "Filters the payments in the response by a PayPal-assigned merchant ID that identifies the payee.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sort_by": {
        "name": "sort_by",
        "in": "query",
        "description": "Sorts the payments in the response by a create time.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": ["create_time"]
        }
      },
      "sort_order": {
        "name": "sort_order",
        "in": "query",
        "description": "Sorts the payments in the response in descending order.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": ["desc"]
        }
      },
      "payment_id": {
        "name": "payment_id",
        "in": "path",
        "description": "The ID of the payment to execute.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "paypal_request_id": {
        "name": "PayPal-Request-Id",
        "description": "The server stores keys for 30 days.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "maxLength": 78
        }
      },
      "sale_id": {
        "name": "sale_id",
        "in": "path",
        "description": "The ID of the sale transaction to refund.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "authorization_id": {
        "name": "authorization_id",
        "in": "path",
        "description": "The ID of the authorization to re-authorize.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "order_id": {
        "name": "order_id",
        "in": "path",
        "description": "The ID of the order to authorize.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "capture_id": {
        "name": "capture_id",
        "in": "path",
        "description": "The ID of the captured payment to refund.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "refund_id": {
        "name": "refund_id",
        "in": "path",
        "description": "The ID of the refund for which to show details.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "deprecated": true
}
